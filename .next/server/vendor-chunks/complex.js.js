"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/complex.js";
exports.ids = ["vendor-chunks/complex.js"];
exports.modules = {

/***/ "(ssr)/./node_modules/complex.js/dist/complex.mjs":
/*!**************************************************!*\
  !*** ./node_modules/complex.js/dist/complex.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Complex: () => (/* binding */ Complex),\n/* harmony export */   \"default\": () => (/* binding */ Complex)\n/* harmony export */ });\n\n\n/**\n *\n * This class allows the manipulation of complex numbers.\n * You can pass a complex number in different formats. Either as object, double, string or two integer parameters.\n *\n * Object form\n * { re: <real>, im: <imaginary> }\n * { arg: <angle>, abs: <radius> }\n * { phi: <angle>, r: <radius> }\n *\n * Array / Vector form\n * [ real, imaginary ]\n *\n * Double form\n * 99.3 - Single double value\n *\n * String form\n * '23.1337' - Simple real number\n * '15+3i' - a simple complex number\n * '3-i' - a simple complex number\n *\n * Example:\n *\n * const c = new Complex('99.3+8i');\n * c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);\n *\n */\n\n\nconst cosh = Math.cosh || function (x) {\n  return Math.abs(x) < 1e-9 ? 1 - x : (Math.exp(x) + Math.exp(-x)) * 0.5;\n};\n\nconst sinh = Math.sinh || function (x) {\n  return Math.abs(x) < 1e-9 ? x : (Math.exp(x) - Math.exp(-x)) * 0.5;\n};\n\n/**\n * Calculates cos(x) - 1 using Taylor series if x is small (-¼π ≤ x ≤ ¼π).\n *\n * @param {number} x\n * @returns {number} cos(x) - 1\n */\nconst cosm1 = function (x) {\n\n  const b = Math.PI / 4;\n  if (-b > x || x > b) {\n    return Math.cos(x) - 1.0;\n  }\n\n  /* Calculate horner form of polynomial of taylor series in Q\n  let fac = 1, alt = 1, pol = {};\n  for (let i = 0; i <= 16; i++) {\n    fac*= i || 1;\n    if (i % 2 == 0) {\n      pol[i] = new Fraction(1, alt * fac);\n      alt = -alt;\n    }\n  }\n  console.log(new Polynomial(pol).toHorner()); // (((((((1/20922789888000x^2-1/87178291200)x^2+1/479001600)x^2-1/3628800)x^2+1/40320)x^2-1/720)x^2+1/24)x^2-1/2)x^2+1\n  */\n\n  const xx = x * x;\n  return xx * (\n    xx * (\n      xx * (\n        xx * (\n          xx * (\n            xx * (\n              xx * (\n                xx / 20922789888000\n                - 1 / 87178291200)\n              + 1 / 479001600)\n            - 1 / 3628800)\n          + 1 / 40320)\n        - 1 / 720)\n      + 1 / 24)\n    - 1 / 2);\n};\n\nconst hypot = function (x, y) {\n\n  x = Math.abs(x);\n  y = Math.abs(y);\n\n  // Ensure `x` is the larger value\n  if (x < y) [x, y] = [y, x];\n\n  // If both are below the threshold, use straightforward Pythagoras\n  if (x < 1e8) return Math.sqrt(x * x + y * y);\n\n  // For larger values, scale to avoid overflow\n  y /= x;\n  return x * Math.sqrt(1 + y * y);\n};\n\nconst parser_exit = function () {\n  throw SyntaxError('Invalid Param');\n};\n\n/**\n * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows\n *\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction logHypot(a, b) {\n\n  const _a = Math.abs(a);\n  const _b = Math.abs(b);\n\n  if (a === 0) {\n    return Math.log(_b);\n  }\n\n  if (b === 0) {\n    return Math.log(_a);\n  }\n\n  if (_a < 3000 && _b < 3000) {\n    return Math.log(a * a + b * b) * 0.5;\n  }\n\n  /* I got 4 ideas to compute this property without overflow:\n   *\n   * Testing 1000000 times with random samples for a,b ∈ [1, 1000000000] against a big decimal library to get an error estimate\n   *\n   * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)\n\n   Math.log(a * a + b * b) / 2\n\n   *\n   *\n   * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)\n\n   const fn = function(a, b) {\n   a = Math.abs(a);\n   b = Math.abs(b);\n   let t = Math.min(a, b);\n   a = Math.max(a, b);\n   t = t / a;\n\n   return Math.log(a) + Math.log(1 + t * t) / 2;\n   };\n\n   * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)\n\n   Math.log(a / Math.cos(Math.atan2(b, a)))\n\n   * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)\n\n   Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))\n\n   */\n\n  a = a * 0.5;\n  b = b * 0.5;\n\n  return 0.5 * Math.log(a * a + b * b) + Math.LN2;\n}\n\nconst P = { 're': 0, 'im': 0 };\nconst parse = function (a, b) {\n\n  const z = P;\n\n  if (a === undefined || a === null) {\n    z['re'] =\n      z['im'] = 0;\n  } else if (b !== undefined) {\n    z['re'] = a;\n    z['im'] = b;\n  } else\n    switch (typeof a) {\n\n      case 'object':\n\n        if ('im' in a && 're' in a) {\n          z['re'] = a['re'];\n          z['im'] = a['im'];\n        } else if ('abs' in a && 'arg' in a) {\n          if (!isFinite(a['abs']) && isFinite(a['arg'])) {\n            return Complex['INFINITY'];\n          }\n          z['re'] = a['abs'] * Math.cos(a['arg']);\n          z['im'] = a['abs'] * Math.sin(a['arg']);\n        } else if ('r' in a && 'phi' in a) {\n          if (!isFinite(a['r']) && isFinite(a['phi'])) {\n            return Complex['INFINITY'];\n          }\n          z['re'] = a['r'] * Math.cos(a['phi']);\n          z['im'] = a['r'] * Math.sin(a['phi']);\n        } else if (a.length === 2) { // Quick array check\n          z['re'] = a[0];\n          z['im'] = a[1];\n        } else {\n          parser_exit();\n        }\n        break;\n\n      case 'string':\n\n        z['im'] = /* void */\n        z['re'] = 0;\n\n        const tokens = a.replace(/_/g, '')\n          .match(/\\d+\\.?\\d*e[+-]?\\d+|\\d+\\.?\\d*|\\.\\d+|./g);\n        let plus = 1;\n        let minus = 0;\n\n        if (tokens === null) {\n          parser_exit();\n        }\n\n        for (let i = 0; i < tokens.length; i++) {\n\n          const c = tokens[i];\n\n          if (c === ' ' || c === '\\t' || c === '\\n') {\n            /* void */\n          } else if (c === '+') {\n            plus++;\n          } else if (c === '-') {\n            minus++;\n          } else if (c === 'i' || c === 'I') {\n\n            if (plus + minus === 0) {\n              parser_exit();\n            }\n\n            if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {\n              z['im'] += parseFloat((minus % 2 ? '-' : '') + tokens[i + 1]);\n              i++;\n            } else {\n              z['im'] += parseFloat((minus % 2 ? '-' : '') + '1');\n            }\n            plus = minus = 0;\n\n          } else {\n\n            if (plus + minus === 0 || isNaN(c)) {\n              parser_exit();\n            }\n\n            if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {\n              z['im'] += parseFloat((minus % 2 ? '-' : '') + c);\n              i++;\n            } else {\n              z['re'] += parseFloat((minus % 2 ? '-' : '') + c);\n            }\n            plus = minus = 0;\n          }\n        }\n\n        // Still something on the stack\n        if (plus + minus > 0) {\n          parser_exit();\n        }\n        break;\n\n      case 'number':\n        z['im'] = 0;\n        z['re'] = a;\n        break;\n\n      default:\n        parser_exit();\n    }\n\n  if (isNaN(z['re']) || isNaN(z['im'])) {\n    // If a calculation is NaN, we treat it as NaN and don't throw\n    //parser_exit();\n  }\n\n  return z;\n};\n\n/**\n * @constructor\n * @returns {Complex}\n */\nfunction Complex(a, b) {\n\n  if (!(this instanceof Complex)) {\n    return new Complex(a, b);\n  }\n\n  const z = parse(a, b);\n\n  this['re'] = z['re'];\n  this['im'] = z['im'];\n}\n\nComplex.prototype = {\n\n  're': 0,\n  'im': 0,\n\n  /**\n   * Calculates the sign of a complex number, which is a normalized complex\n   *\n   * @returns {Complex}\n   */\n  'sign': function () {\n\n    const abs = hypot(this['re'], this['im']);\n\n    return new Complex(\n      this['re'] / abs,\n      this['im'] / abs);\n  },\n\n  /**\n   * Adds two complex numbers\n   *\n   * @returns {Complex}\n   */\n  'add': function (a, b) {\n\n    const z = parse(a, b);\n\n    const tInfin = this['isInfinite']();\n    const zInfin = !(isFinite(z['re']) && isFinite(z['im']));\n\n    if (tInfin || zInfin) {\n\n      if (tInfin && zInfin) {\n        // Infinity + Infinity = NaN\n        return Complex['NAN'];\n      }\n      // Infinity + z = Infinity { where z != Infinity }\n      return Complex['INFINITY'];\n    }\n\n    return new Complex(\n      this['re'] + z['re'],\n      this['im'] + z['im']);\n  },\n\n  /**\n   * Subtracts two complex numbers\n   *\n   * @returns {Complex}\n   */\n  'sub': function (a, b) {\n\n    const z = parse(a, b);\n\n    const tInfin = this['isInfinite']();\n    const zInfin = !(isFinite(z['re']) && isFinite(z['im']));\n\n    if (tInfin || zInfin) {\n\n      if (tInfin && zInfin) {\n        // Infinity - Infinity = NaN\n        return Complex['NAN'];\n      }\n      // Infinity - z = Infinity { where z != Infinity }\n      return Complex['INFINITY'];\n    }\n\n    return new Complex(\n      this['re'] - z['re'],\n      this['im'] - z['im']);\n  },\n\n  /**\n   * Multiplies two complex numbers\n   *\n   * @returns {Complex}\n   */\n  'mul': function (a, b) {\n\n    const z = parse(a, b);\n\n    const tInfin = this['isInfinite']();\n    const zInfin = !(isFinite(z['re']) && isFinite(z['im']));\n    const tIsZero = this['re'] === 0 && this['im'] === 0;\n    const zIsZero = z['re'] === 0 && z['im'] === 0;\n\n    // Infinity * 0 = NaN\n    if (tInfin && zIsZero || zInfin && tIsZero) {\n      return Complex['NAN'];\n    }\n\n    // Infinity * z = Infinity { where z != 0 }\n    if (tInfin || zInfin) {\n      return Complex['INFINITY'];\n    }\n\n    // Shortcut for real values\n    if (z['im'] === 0 && this['im'] === 0) {\n      return new Complex(this['re'] * z['re'], 0);\n    }\n\n    return new Complex(\n      this['re'] * z['re'] - this['im'] * z['im'],\n      this['re'] * z['im'] + this['im'] * z['re']);\n  },\n\n  /**\n   * Divides two complex numbers\n   *\n   * @returns {Complex}\n   */\n  'div': function (a, b) {\n\n    const z = parse(a, b);\n\n    const tInfin = this['isInfinite']();\n    const zInfin = !(isFinite(z['re']) && isFinite(z['im']));\n    const tIsZero = this['re'] === 0 && this['im'] === 0;\n    const zIsZero = z['re'] === 0 && z['im'] === 0;\n\n    // 0 / 0 = NaN and Infinity / Infinity = NaN\n    if (tIsZero && zIsZero || tInfin && zInfin) {\n      return Complex['NAN'];\n    }\n\n    // Infinity / 0 = Infinity\n    if (zIsZero || tInfin) {\n      return Complex['INFINITY'];\n    }\n\n    // 0 / Infinity = 0\n    if (tIsZero || zInfin) {\n      return Complex['ZERO'];\n    }\n\n    if (0 === z['im']) {\n      // Divisor is real\n      return new Complex(this['re'] / z['re'], this['im'] / z['re']);\n    }\n\n    if (Math.abs(z['re']) < Math.abs(z['im'])) {\n\n      const x = z['re'] / z['im'];\n      const t = z['re'] * x + z['im'];\n\n      return new Complex(\n        (this['re'] * x + this['im']) / t,\n        (this['im'] * x - this['re']) / t);\n\n    } else {\n\n      const x = z['im'] / z['re'];\n      const t = z['im'] * x + z['re'];\n\n      return new Complex(\n        (this['re'] + this['im'] * x) / t,\n        (this['im'] - this['re'] * x) / t);\n    }\n  },\n\n  /**\n   * Calculate the power of two complex numbers\n   *\n   * @returns {Complex}\n   */\n  'pow': function (a, b) {\n\n    const z = parse(a, b);\n\n    const tIsZero = this['re'] === 0 && this['im'] === 0;\n    const zIsZero = z['re'] === 0 && z['im'] === 0;\n\n    if (zIsZero) {\n      return Complex['ONE'];\n    }\n\n    // If the exponent is real\n    if (z['im'] === 0) {\n\n      if (this['im'] === 0 && this['re'] > 0) {\n\n        return new Complex(Math.pow(this['re'], z['re']), 0);\n\n      } else if (this['re'] === 0) { // If base is fully imaginary\n\n        switch ((z['re'] % 4 + 4) % 4) {\n          case 0:\n            return new Complex(Math.pow(this['im'], z['re']), 0);\n          case 1:\n            return new Complex(0, Math.pow(this['im'], z['re']));\n          case 2:\n            return new Complex(-Math.pow(this['im'], z['re']), 0);\n          case 3:\n            return new Complex(0, -Math.pow(this['im'], z['re']));\n        }\n      }\n    }\n\n    /* I couldn't find a good formula, so here is a derivation and optimization\n     *\n     * z_1^z_2 = (a + bi)^(c + di)\n     *         = exp((c + di) * log(a + bi)\n     *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))\n     * =>...\n     * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))\n     * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))\n     *\n     * =>...\n     * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))\n     * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))\n     *\n     * =>\n     * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))\n     * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))\n     *\n     */\n\n    if (tIsZero && z['re'] > 0) { // Same behavior as Wolframalpha, Zero if real part is zero\n      return Complex['ZERO'];\n    }\n\n    const arg = Math.atan2(this['im'], this['re']);\n    const loh = logHypot(this['re'], this['im']);\n\n    let re = Math.exp(z['re'] * loh - z['im'] * arg);\n    let im = z['im'] * loh + z['re'] * arg;\n    return new Complex(\n      re * Math.cos(im),\n      re * Math.sin(im));\n  },\n\n  /**\n   * Calculate the complex square root\n   *\n   * @returns {Complex}\n   */\n  'sqrt': function () {\n\n    const a = this['re'];\n    const b = this['im'];\n\n    if (b === 0) {\n      // Real number case\n      if (a >= 0) {\n        return new Complex(Math.sqrt(a), 0);\n      } else {\n        return new Complex(0, Math.sqrt(-a));\n      }\n    }\n\n    const r = hypot(a, b);\n\n    let re = Math.sqrt(0.5 * (r + Math.abs(a))); // sqrt(2x) / 2 = sqrt(x / 2)\n    let im = Math.abs(b) / (2 * re);\n\n    if (a >= 0) {\n      return new Complex(re, b < 0 ? -im : im);\n    } else {\n      return new Complex(im, b < 0 ? -re : re);\n    }\n  },\n\n  /**\n   * Calculate the complex exponent\n   *\n   * @returns {Complex}\n   */\n  'exp': function () {\n\n    const er = Math.exp(this['re']);\n\n    if (this['im'] === 0) {\n      return new Complex(er, 0);\n    }\n    return new Complex(\n      er * Math.cos(this['im']),\n      er * Math.sin(this['im']));\n  },\n\n  /**\n   * Calculate the complex exponent and subtracts one.\n   *\n   * This may be more accurate than `Complex(x).exp().sub(1)` if\n   * `x` is small.\n   *\n   * @returns {Complex}\n   */\n  'expm1': function () {\n\n    /**\n     * exp(a + i*b) - 1\n     = exp(a) * (cos(b) + j*sin(b)) - 1\n     = expm1(a)*cos(b) + cosm1(b) + j*exp(a)*sin(b)\n     */\n\n    const a = this['re'];\n    const b = this['im'];\n\n    return new Complex(\n      Math.expm1(a) * Math.cos(b) + cosm1(b),\n      Math.exp(a) * Math.sin(b));\n  },\n\n  /**\n   * Calculate the natural log\n   *\n   * @returns {Complex}\n   */\n  'log': function () {\n\n    const a = this['re'];\n    const b = this['im'];\n\n    if (b === 0 && a > 0) {\n      return new Complex(Math.log(a), 0);\n    }\n\n    return new Complex(\n      logHypot(a, b),\n      Math.atan2(b, a));\n  },\n\n  /**\n   * Calculate the magnitude of the complex number\n   *\n   * @returns {number}\n   */\n  'abs': function () {\n\n    return hypot(this['re'], this['im']);\n  },\n\n  /**\n   * Calculate the angle of the complex number\n   *\n   * @returns {number}\n   */\n  'arg': function () {\n\n    return Math.atan2(this['im'], this['re']);\n  },\n\n  /**\n   * Calculate the sine of the complex number\n   *\n   * @returns {Complex}\n   */\n  'sin': function () {\n\n    // sin(z) = ( e^iz - e^-iz ) / 2i \n    //        = sin(a)cosh(b) + i cos(a)sinh(b)\n\n    const a = this['re'];\n    const b = this['im'];\n\n    return new Complex(\n      Math.sin(a) * cosh(b),\n      Math.cos(a) * sinh(b));\n  },\n\n  /**\n   * Calculate the cosine\n   *\n   * @returns {Complex}\n   */\n  'cos': function () {\n\n    // cos(z) = ( e^iz + e^-iz ) / 2 \n    //        = cos(a)cosh(b) - i sin(a)sinh(b)\n\n    const a = this['re'];\n    const b = this['im'];\n\n    return new Complex(\n      Math.cos(a) * cosh(b),\n      -Math.sin(a) * sinh(b));\n  },\n\n  /**\n   * Calculate the tangent\n   *\n   * @returns {Complex}\n   */\n  'tan': function () {\n\n    // tan(z) = sin(z) / cos(z) \n    //        = ( e^iz - e^-iz ) / ( i( e^iz + e^-iz ) )\n    //        = ( e^2iz - 1 ) / i( e^2iz + 1 )\n    //        = ( sin(2a) + i sinh(2b) ) / ( cos(2a) + cosh(2b) )\n\n    const a = 2 * this['re'];\n    const b = 2 * this['im'];\n    const d = Math.cos(a) + cosh(b);\n\n    return new Complex(\n      Math.sin(a) / d,\n      sinh(b) / d);\n  },\n\n  /**\n   * Calculate the cotangent\n   *\n   * @returns {Complex}\n   */\n  'cot': function () {\n\n    // cot(c) = i(e^(ci) + e^(-ci)) / (e^(ci) - e^(-ci))\n\n    const a = 2 * this['re'];\n    const b = 2 * this['im'];\n    const d = Math.cos(a) - cosh(b);\n\n    return new Complex(\n      -Math.sin(a) / d,\n      sinh(b) / d);\n  },\n\n  /**\n   * Calculate the secant\n   *\n   * @returns {Complex}\n   */\n  'sec': function () {\n\n    // sec(c) = 2 / (e^(ci) + e^(-ci))\n\n    const a = this['re'];\n    const b = this['im'];\n    const d = 0.5 * cosh(2 * b) + 0.5 * Math.cos(2 * a);\n\n    return new Complex(\n      Math.cos(a) * cosh(b) / d,\n      Math.sin(a) * sinh(b) / d);\n  },\n\n  /**\n   * Calculate the cosecans\n   *\n   * @returns {Complex}\n   */\n  'csc': function () {\n\n    // csc(c) = 2i / (e^(ci) - e^(-ci))\n\n    const a = this['re'];\n    const b = this['im'];\n    const d = 0.5 * cosh(2 * b) - 0.5 * Math.cos(2 * a);\n\n    return new Complex(\n      Math.sin(a) * cosh(b) / d,\n      -Math.cos(a) * sinh(b) / d);\n  },\n\n  /**\n   * Calculate the complex arcus sinus\n   *\n   * @returns {Complex}\n   */\n  'asin': function () {\n\n    // asin(c) = -i * log(ci + sqrt(1 - c^2))\n\n    const a = this['re'];\n    const b = this['im'];\n\n    const t1 = new Complex(\n      b * b - a * a + 1,\n      -2 * a * b)['sqrt']();\n\n    const t2 = new Complex(\n      t1['re'] - b,\n      t1['im'] + a)['log']();\n\n    return new Complex(t2['im'], -t2['re']);\n  },\n\n  /**\n   * Calculate the complex arcus cosinus\n   *\n   * @returns {Complex}\n   */\n  'acos': function () {\n\n    // acos(c) = i * log(c - i * sqrt(1 - c^2))\n\n    const a = this['re'];\n    const b = this['im'];\n\n    const t1 = new Complex(\n      b * b - a * a + 1,\n      -2 * a * b)['sqrt']();\n\n    const t2 = new Complex(\n      t1['re'] - b,\n      t1['im'] + a)['log']();\n\n    return new Complex(Math.PI / 2 - t2['im'], t2['re']);\n  },\n\n  /**\n   * Calculate the complex arcus tangent\n   *\n   * @returns {Complex}\n   */\n  'atan': function () {\n\n    // atan(c) = i / 2 log((i + x) / (i - x))\n\n    const a = this['re'];\n    const b = this['im'];\n\n    if (a === 0) {\n\n      if (b === 1) {\n        return new Complex(0, Infinity);\n      }\n\n      if (b === -1) {\n        return new Complex(0, -Infinity);\n      }\n    }\n\n    const d = a * a + (1.0 - b) * (1.0 - b);\n\n    const t1 = new Complex(\n      (1 - b * b - a * a) / d,\n      -2 * a / d).log();\n\n    return new Complex(-0.5 * t1['im'], 0.5 * t1['re']);\n  },\n\n  /**\n   * Calculate the complex arcus cotangent\n   *\n   * @returns {Complex}\n   */\n  'acot': function () {\n\n    // acot(c) = i / 2 log((c - i) / (c + i))\n\n    const a = this['re'];\n    const b = this['im'];\n\n    if (b === 0) {\n      return new Complex(Math.atan2(1, a), 0);\n    }\n\n    const d = a * a + b * b;\n    return (d !== 0)\n      ? new Complex(\n        a / d,\n        -b / d).atan()\n      : new Complex(\n        (a !== 0) ? a / 0 : 0,\n        (b !== 0) ? -b / 0 : 0).atan();\n  },\n\n  /**\n   * Calculate the complex arcus secant\n   *\n   * @returns {Complex}\n   */\n  'asec': function () {\n\n    // asec(c) = -i * log(1 / c + sqrt(1 - i / c^2))\n\n    const a = this['re'];\n    const b = this['im'];\n\n    if (a === 0 && b === 0) {\n      return new Complex(0, Infinity);\n    }\n\n    const d = a * a + b * b;\n    return (d !== 0)\n      ? new Complex(\n        a / d,\n        -b / d).acos()\n      : new Complex(\n        (a !== 0) ? a / 0 : 0,\n        (b !== 0) ? -b / 0 : 0).acos();\n  },\n\n  /**\n   * Calculate the complex arcus cosecans\n   *\n   * @returns {Complex}\n   */\n  'acsc': function () {\n\n    // acsc(c) = -i * log(i / c + sqrt(1 - 1 / c^2))\n\n    const a = this['re'];\n    const b = this['im'];\n\n    if (a === 0 && b === 0) {\n      return new Complex(Math.PI / 2, Infinity);\n    }\n\n    const d = a * a + b * b;\n    return (d !== 0)\n      ? new Complex(\n        a / d,\n        -b / d).asin()\n      : new Complex(\n        (a !== 0) ? a / 0 : 0,\n        (b !== 0) ? -b / 0 : 0).asin();\n  },\n\n  /**\n   * Calculate the complex sinh\n   *\n   * @returns {Complex}\n   */\n  'sinh': function () {\n\n    // sinh(c) = (e^c - e^-c) / 2\n\n    const a = this['re'];\n    const b = this['im'];\n\n    return new Complex(\n      sinh(a) * Math.cos(b),\n      cosh(a) * Math.sin(b));\n  },\n\n  /**\n   * Calculate the complex cosh\n   *\n   * @returns {Complex}\n   */\n  'cosh': function () {\n\n    // cosh(c) = (e^c + e^-c) / 2\n\n    const a = this['re'];\n    const b = this['im'];\n\n    return new Complex(\n      cosh(a) * Math.cos(b),\n      sinh(a) * Math.sin(b));\n  },\n\n  /**\n   * Calculate the complex tanh\n   *\n   * @returns {Complex}\n   */\n  'tanh': function () {\n\n    // tanh(c) = (e^c - e^-c) / (e^c + e^-c)\n\n    const a = 2 * this['re'];\n    const b = 2 * this['im'];\n    const d = cosh(a) + Math.cos(b);\n\n    return new Complex(\n      sinh(a) / d,\n      Math.sin(b) / d);\n  },\n\n  /**\n   * Calculate the complex coth\n   *\n   * @returns {Complex}\n   */\n  'coth': function () {\n\n    // coth(c) = (e^c + e^-c) / (e^c - e^-c)\n\n    const a = 2 * this['re'];\n    const b = 2 * this['im'];\n    const d = cosh(a) - Math.cos(b);\n\n    return new Complex(\n      sinh(a) / d,\n      -Math.sin(b) / d);\n  },\n\n  /**\n   * Calculate the complex coth\n   *\n   * @returns {Complex}\n   */\n  'csch': function () {\n\n    // csch(c) = 2 / (e^c - e^-c)\n\n    const a = this['re'];\n    const b = this['im'];\n    const d = Math.cos(2 * b) - cosh(2 * a);\n\n    return new Complex(\n      -2 * sinh(a) * Math.cos(b) / d,\n      2 * cosh(a) * Math.sin(b) / d);\n  },\n\n  /**\n   * Calculate the complex sech\n   *\n   * @returns {Complex}\n   */\n  'sech': function () {\n\n    // sech(c) = 2 / (e^c + e^-c)\n\n    const a = this['re'];\n    const b = this['im'];\n    const d = Math.cos(2 * b) + cosh(2 * a);\n\n    return new Complex(\n      2 * cosh(a) * Math.cos(b) / d,\n      -2 * sinh(a) * Math.sin(b) / d);\n  },\n\n  /**\n   * Calculate the complex asinh\n   *\n   * @returns {Complex}\n   */\n  'asinh': function () {\n\n    // asinh(c) = log(c + sqrt(c^2 + 1))\n\n    let tmp = this['im'];\n    this['im'] = -this['re'];\n    this['re'] = tmp;\n    const res = this['asin']();\n\n    this['re'] = -this['im'];\n    this['im'] = tmp;\n    tmp = res['re'];\n\n    res['re'] = -res['im'];\n    res['im'] = tmp;\n    return res;\n  },\n\n  /**\n   * Calculate the complex acosh\n   *\n   * @returns {Complex}\n   */\n  'acosh': function () {\n\n    // acosh(c) = log(c + sqrt(c^2 - 1))\n\n    const res = this['acos']();\n    if (res['im'] <= 0) {\n      const tmp = res['re'];\n      res['re'] = -res['im'];\n      res['im'] = tmp;\n    } else {\n      const tmp = res['im'];\n      res['im'] = -res['re'];\n      res['re'] = tmp;\n    }\n    return res;\n  },\n\n  /**\n   * Calculate the complex atanh\n   *\n   * @returns {Complex}\n   */\n  'atanh': function () {\n\n    // atanh(c) = log((1+c) / (1-c)) / 2\n\n    const a = this['re'];\n    const b = this['im'];\n\n    const noIM = a > 1 && b === 0;\n    const oneMinus = 1 - a;\n    const onePlus = 1 + a;\n    const d = oneMinus * oneMinus + b * b;\n\n    const x = (d !== 0)\n      ? new Complex(\n        (onePlus * oneMinus - b * b) / d,\n        (b * oneMinus + onePlus * b) / d)\n      : new Complex(\n        (a !== -1) ? (a / 0) : 0,\n        (b !== 0) ? (b / 0) : 0);\n\n    const temp = x['re'];\n    x['re'] = logHypot(x['re'], x['im']) / 2;\n    x['im'] = Math.atan2(x['im'], temp) / 2;\n    if (noIM) {\n      x['im'] = -x['im'];\n    }\n    return x;\n  },\n\n  /**\n   * Calculate the complex acoth\n   *\n   * @returns {Complex}\n   */\n  'acoth': function () {\n\n    // acoth(c) = log((c+1) / (c-1)) / 2\n\n    const a = this['re'];\n    const b = this['im'];\n\n    if (a === 0 && b === 0) {\n      return new Complex(0, Math.PI / 2);\n    }\n\n    const d = a * a + b * b;\n    return (d !== 0)\n      ? new Complex(\n        a / d,\n        -b / d).atanh()\n      : new Complex(\n        (a !== 0) ? a / 0 : 0,\n        (b !== 0) ? -b / 0 : 0).atanh();\n  },\n\n  /**\n   * Calculate the complex acsch\n   *\n   * @returns {Complex}\n   */\n  'acsch': function () {\n\n    // acsch(c) = log((1+sqrt(1+c^2))/c)\n\n    const a = this['re'];\n    const b = this['im'];\n\n    if (b === 0) {\n\n      return new Complex(\n        (a !== 0)\n          ? Math.log(a + Math.sqrt(a * a + 1))\n          : Infinity, 0);\n    }\n\n    const d = a * a + b * b;\n    return (d !== 0)\n      ? new Complex(\n        a / d,\n        -b / d).asinh()\n      : new Complex(\n        (a !== 0) ? a / 0 : 0,\n        (b !== 0) ? -b / 0 : 0).asinh();\n  },\n\n  /**\n   * Calculate the complex asech\n   *\n   * @returns {Complex}\n   */\n  'asech': function () {\n\n    // asech(c) = log((1+sqrt(1-c^2))/c)\n\n    const a = this['re'];\n    const b = this['im'];\n\n    if (this['isZero']()) {\n      return Complex['INFINITY'];\n    }\n\n    const d = a * a + b * b;\n    return (d !== 0)\n      ? new Complex(\n        a / d,\n        -b / d).acosh()\n      : new Complex(\n        (a !== 0) ? a / 0 : 0,\n        (b !== 0) ? -b / 0 : 0).acosh();\n  },\n\n  /**\n   * Calculate the complex inverse 1/z\n   *\n   * @returns {Complex}\n   */\n  'inverse': function () {\n\n    // 1 / 0 = Infinity and 1 / Infinity = 0\n    if (this['isZero']()) {\n      return Complex['INFINITY'];\n    }\n\n    if (this['isInfinite']()) {\n      return Complex['ZERO'];\n    }\n\n    const a = this['re'];\n    const b = this['im'];\n\n    const d = a * a + b * b;\n\n    return new Complex(a / d, -b / d);\n  },\n\n  /**\n   * Returns the complex conjugate\n   *\n   * @returns {Complex}\n   */\n  'conjugate': function () {\n\n    return new Complex(this['re'], -this['im']);\n  },\n\n  /**\n   * Gets the negated complex number\n   *\n   * @returns {Complex}\n   */\n  'neg': function () {\n\n    return new Complex(-this['re'], -this['im']);\n  },\n\n  /**\n   * Ceils the actual complex number\n   *\n   * @returns {Complex}\n   */\n  'ceil': function (places) {\n\n    places = Math.pow(10, places || 0);\n\n    return new Complex(\n      Math.ceil(this['re'] * places) / places,\n      Math.ceil(this['im'] * places) / places);\n  },\n\n  /**\n   * Floors the actual complex number\n   *\n   * @returns {Complex}\n   */\n  'floor': function (places) {\n\n    places = Math.pow(10, places || 0);\n\n    return new Complex(\n      Math.floor(this['re'] * places) / places,\n      Math.floor(this['im'] * places) / places);\n  },\n\n  /**\n   * Ceils the actual complex number\n   *\n   * @returns {Complex}\n   */\n  'round': function (places) {\n\n    places = Math.pow(10, places || 0);\n\n    return new Complex(\n      Math.round(this['re'] * places) / places,\n      Math.round(this['im'] * places) / places);\n  },\n\n  /**\n   * Compares two complex numbers\n   *\n   * **Note:** new Complex(Infinity).equals(Infinity) === false\n   *\n   * @returns {boolean}\n   */\n  'equals': function (a, b) {\n\n    const z = parse(a, b);\n\n    return Math.abs(z['re'] - this['re']) <= Complex['EPSILON'] &&\n      Math.abs(z['im'] - this['im']) <= Complex['EPSILON'];\n  },\n\n  /**\n   * Clones the actual object\n   *\n   * @returns {Complex}\n   */\n  'clone': function () {\n\n    return new Complex(this['re'], this['im']);\n  },\n\n  /**\n   * Gets a string of the actual complex number\n   *\n   * @returns {string}\n   */\n  'toString': function () {\n\n    let a = this['re'];\n    let b = this['im'];\n    let ret = \"\";\n\n    if (this['isNaN']()) {\n      return 'NaN';\n    }\n\n    if (this['isInfinite']()) {\n      return 'Infinity';\n    }\n\n    if (Math.abs(a) < Complex['EPSILON']) {\n      a = 0;\n    }\n\n    if (Math.abs(b) < Complex['EPSILON']) {\n      b = 0;\n    }\n\n    // If is real number\n    if (b === 0) {\n      return ret + a;\n    }\n\n    if (a !== 0) {\n      ret += a;\n      ret += \" \";\n      if (b < 0) {\n        b = -b;\n        ret += \"-\";\n      } else {\n        ret += \"+\";\n      }\n      ret += \" \";\n    } else if (b < 0) {\n      b = -b;\n      ret += \"-\";\n    }\n\n    if (1 !== b) { // b is the absolute imaginary part\n      ret += b;\n    }\n    return ret + \"i\";\n  },\n\n  /**\n   * Returns the actual number as a vector\n   *\n   * @returns {Array}\n   */\n  'toVector': function () {\n\n    return [this['re'], this['im']];\n  },\n\n  /**\n   * Returns the actual real value of the current object\n   *\n   * @returns {number|null}\n   */\n  'valueOf': function () {\n\n    if (this['im'] === 0) {\n      return this['re'];\n    }\n    return null;\n  },\n\n  /**\n   * Determines whether a complex number is not on the Riemann sphere.\n   *\n   * @returns {boolean}\n   */\n  'isNaN': function () {\n    return isNaN(this['re']) || isNaN(this['im']);\n  },\n\n  /**\n   * Determines whether or not a complex number is at the zero pole of the\n   * Riemann sphere.\n   *\n   * @returns {boolean}\n   */\n  'isZero': function () {\n    return this['im'] === 0 && this['re'] === 0;\n  },\n\n  /**\n   * Determines whether a complex number is not at the infinity pole of the\n   * Riemann sphere.\n   *\n   * @returns {boolean}\n   */\n  'isFinite': function () {\n    return isFinite(this['re']) && isFinite(this['im']);\n  },\n\n  /**\n   * Determines whether or not a complex number is at the infinity pole of the\n   * Riemann sphere.\n   *\n   * @returns {boolean}\n   */\n  'isInfinite': function () {\n    return !this['isFinite']();\n  }\n};\n\nComplex['ZERO'] = new Complex(0, 0);\nComplex['ONE'] = new Complex(1, 0);\nComplex['I'] = new Complex(0, 1);\nComplex['PI'] = new Complex(Math.PI, 0);\nComplex['E'] = new Complex(Math.E, 0);\nComplex['INFINITY'] = new Complex(Infinity, Infinity);\nComplex['NAN'] = new Complex(NaN, NaN);\nComplex['EPSILON'] = 1e-15;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29tcGxleC5qcy9kaXN0L2NvbXBsZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLEtBQUs7QUFDTCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxXQUFXO0FBQ3JCO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWEsUUFBUTtBQUNyQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQkFBa0IsU0FBUztBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0M7QUFDL0M7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixhQUFhO0FBQ2I7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxZQUFZO0FBQ1o7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsMkJBQTJCO0FBQ3JDO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHdCQUF3QixtQkFBbUI7O0FBRTNDOztBQUVBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQSxZQUFZO0FBQ1o7QUFDQSxZQUFZOztBQUVaO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBLFlBQVk7O0FBRVo7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNOztBQUVOO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUEsUUFBUSw2QkFBNkI7O0FBRXJDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0NBQWtDO0FBQ2xDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxpREFBaUQ7QUFDakQ7O0FBRUE7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHRSIsInNvdXJjZXMiOlsiL2hvbWUvaGFycnljaGVuL3Byb2plY3QvZnVuY3Rpb24tcGxvdHRlci9ub2RlX21vZHVsZXMvY29tcGxleC5qcy9kaXN0L2NvbXBsZXgubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKlxuICogVGhpcyBjbGFzcyBhbGxvd3MgdGhlIG1hbmlwdWxhdGlvbiBvZiBjb21wbGV4IG51bWJlcnMuXG4gKiBZb3UgY2FuIHBhc3MgYSBjb21wbGV4IG51bWJlciBpbiBkaWZmZXJlbnQgZm9ybWF0cy4gRWl0aGVyIGFzIG9iamVjdCwgZG91YmxlLCBzdHJpbmcgb3IgdHdvIGludGVnZXIgcGFyYW1ldGVycy5cbiAqXG4gKiBPYmplY3QgZm9ybVxuICogeyByZTogPHJlYWw+LCBpbTogPGltYWdpbmFyeT4gfVxuICogeyBhcmc6IDxhbmdsZT4sIGFiczogPHJhZGl1cz4gfVxuICogeyBwaGk6IDxhbmdsZT4sIHI6IDxyYWRpdXM+IH1cbiAqXG4gKiBBcnJheSAvIFZlY3RvciBmb3JtXG4gKiBbIHJlYWwsIGltYWdpbmFyeSBdXG4gKlxuICogRG91YmxlIGZvcm1cbiAqIDk5LjMgLSBTaW5nbGUgZG91YmxlIHZhbHVlXG4gKlxuICogU3RyaW5nIGZvcm1cbiAqICcyMy4xMzM3JyAtIFNpbXBsZSByZWFsIG51bWJlclxuICogJzE1KzNpJyAtIGEgc2ltcGxlIGNvbXBsZXggbnVtYmVyXG4gKiAnMy1pJyAtIGEgc2ltcGxlIGNvbXBsZXggbnVtYmVyXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBjb25zdCBjID0gbmV3IENvbXBsZXgoJzk5LjMrOGknKTtcbiAqIGMubXVsKHtyOiAzLCBpOiA5fSkuZGl2KDQuOSkuc3ViKDMsIDIpO1xuICpcbiAqL1xuXG5cbmNvbnN0IGNvc2ggPSBNYXRoLmNvc2ggfHwgZnVuY3Rpb24gKHgpIHtcbiAgcmV0dXJuIE1hdGguYWJzKHgpIDwgMWUtOSA/IDEgLSB4IDogKE1hdGguZXhwKHgpICsgTWF0aC5leHAoLXgpKSAqIDAuNTtcbn07XG5cbmNvbnN0IHNpbmggPSBNYXRoLnNpbmggfHwgZnVuY3Rpb24gKHgpIHtcbiAgcmV0dXJuIE1hdGguYWJzKHgpIDwgMWUtOSA/IHggOiAoTWF0aC5leHAoeCkgLSBNYXRoLmV4cCgteCkpICogMC41O1xufTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIGNvcyh4KSAtIDEgdXNpbmcgVGF5bG9yIHNlcmllcyBpZiB4IGlzIHNtYWxsICgtwrzPgCDiiaQgeCDiiaQgwrzPgCkuXG4gKlxuICogQHBhcmFtIHtudW1iZXJ9IHhcbiAqIEByZXR1cm5zIHtudW1iZXJ9IGNvcyh4KSAtIDFcbiAqL1xuY29uc3QgY29zbTEgPSBmdW5jdGlvbiAoeCkge1xuXG4gIGNvbnN0IGIgPSBNYXRoLlBJIC8gNDtcbiAgaWYgKC1iID4geCB8fCB4ID4gYikge1xuICAgIHJldHVybiBNYXRoLmNvcyh4KSAtIDEuMDtcbiAgfVxuXG4gIC8qIENhbGN1bGF0ZSBob3JuZXIgZm9ybSBvZiBwb2x5bm9taWFsIG9mIHRheWxvciBzZXJpZXMgaW4gUVxuICBsZXQgZmFjID0gMSwgYWx0ID0gMSwgcG9sID0ge307XG4gIGZvciAobGV0IGkgPSAwOyBpIDw9IDE2OyBpKyspIHtcbiAgICBmYWMqPSBpIHx8IDE7XG4gICAgaWYgKGkgJSAyID09IDApIHtcbiAgICAgIHBvbFtpXSA9IG5ldyBGcmFjdGlvbigxLCBhbHQgKiBmYWMpO1xuICAgICAgYWx0ID0gLWFsdDtcbiAgICB9XG4gIH1cbiAgY29uc29sZS5sb2cobmV3IFBvbHlub21pYWwocG9sKS50b0hvcm5lcigpKTsgLy8gKCgoKCgoKDEvMjA5MjI3ODk4ODgwMDB4XjItMS84NzE3ODI5MTIwMCl4XjIrMS80NzkwMDE2MDApeF4yLTEvMzYyODgwMCl4XjIrMS80MDMyMCl4XjItMS83MjApeF4yKzEvMjQpeF4yLTEvMil4XjIrMVxuICAqL1xuXG4gIGNvbnN0IHh4ID0geCAqIHg7XG4gIHJldHVybiB4eCAqIChcbiAgICB4eCAqIChcbiAgICAgIHh4ICogKFxuICAgICAgICB4eCAqIChcbiAgICAgICAgICB4eCAqIChcbiAgICAgICAgICAgIHh4ICogKFxuICAgICAgICAgICAgICB4eCAqIChcbiAgICAgICAgICAgICAgICB4eCAvIDIwOTIyNzg5ODg4MDAwXG4gICAgICAgICAgICAgICAgLSAxIC8gODcxNzgyOTEyMDApXG4gICAgICAgICAgICAgICsgMSAvIDQ3OTAwMTYwMClcbiAgICAgICAgICAgIC0gMSAvIDM2Mjg4MDApXG4gICAgICAgICAgKyAxIC8gNDAzMjApXG4gICAgICAgIC0gMSAvIDcyMClcbiAgICAgICsgMSAvIDI0KVxuICAgIC0gMSAvIDIpO1xufTtcblxuY29uc3QgaHlwb3QgPSBmdW5jdGlvbiAoeCwgeSkge1xuXG4gIHggPSBNYXRoLmFicyh4KTtcbiAgeSA9IE1hdGguYWJzKHkpO1xuXG4gIC8vIEVuc3VyZSBgeGAgaXMgdGhlIGxhcmdlciB2YWx1ZVxuICBpZiAoeCA8IHkpIFt4LCB5XSA9IFt5LCB4XTtcblxuICAvLyBJZiBib3RoIGFyZSBiZWxvdyB0aGUgdGhyZXNob2xkLCB1c2Ugc3RyYWlnaHRmb3J3YXJkIFB5dGhhZ29yYXNcbiAgaWYgKHggPCAxZTgpIHJldHVybiBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7XG5cbiAgLy8gRm9yIGxhcmdlciB2YWx1ZXMsIHNjYWxlIHRvIGF2b2lkIG92ZXJmbG93XG4gIHkgLz0geDtcbiAgcmV0dXJuIHggKiBNYXRoLnNxcnQoMSArIHkgKiB5KTtcbn07XG5cbmNvbnN0IHBhcnNlcl9leGl0ID0gZnVuY3Rpb24gKCkge1xuICB0aHJvdyBTeW50YXhFcnJvcignSW52YWxpZCBQYXJhbScpO1xufTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIGxvZyhzcXJ0KGFeMitiXjIpKSBpbiBhIHdheSB0byBhdm9pZCBvdmVyZmxvd3NcbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gYVxuICogQHBhcmFtIHtudW1iZXJ9IGJcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIGxvZ0h5cG90KGEsIGIpIHtcblxuICBjb25zdCBfYSA9IE1hdGguYWJzKGEpO1xuICBjb25zdCBfYiA9IE1hdGguYWJzKGIpO1xuXG4gIGlmIChhID09PSAwKSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKF9iKTtcbiAgfVxuXG4gIGlmIChiID09PSAwKSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKF9hKTtcbiAgfVxuXG4gIGlmIChfYSA8IDMwMDAgJiYgX2IgPCAzMDAwKSB7XG4gICAgcmV0dXJuIE1hdGgubG9nKGEgKiBhICsgYiAqIGIpICogMC41O1xuICB9XG5cbiAgLyogSSBnb3QgNCBpZGVhcyB0byBjb21wdXRlIHRoaXMgcHJvcGVydHkgd2l0aG91dCBvdmVyZmxvdzpcbiAgICpcbiAgICogVGVzdGluZyAxMDAwMDAwIHRpbWVzIHdpdGggcmFuZG9tIHNhbXBsZXMgZm9yIGEsYiDiiIggWzEsIDEwMDAwMDAwMDBdIGFnYWluc3QgYSBiaWcgZGVjaW1hbCBsaWJyYXJ5IHRvIGdldCBhbiBlcnJvciBlc3RpbWF0ZVxuICAgKlxuICAgKiAxLiBPbmx5IGVsaW1pbmF0ZSB0aGUgc3F1YXJlIHJvb3Q6IChPVkVSQUxMIEVSUk9SOiAzLjkxMjI0ODMwMzA5NTExMTZlLTExKVxuXG4gICBNYXRoLmxvZyhhICogYSArIGIgKiBiKSAvIDJcblxuICAgKlxuICAgKlxuICAgKiAyLiBUcnkgdG8gdXNlIHRoZSBub24tb3ZlcmZsb3dpbmcgcHl0aGFnb3JhczogKE9WRVJBTEwgRVJST1I6IDguODg5NzYwMDM5MjEwMTU5ZS0xMClcblxuICAgY29uc3QgZm4gPSBmdW5jdGlvbihhLCBiKSB7XG4gICBhID0gTWF0aC5hYnMoYSk7XG4gICBiID0gTWF0aC5hYnMoYik7XG4gICBsZXQgdCA9IE1hdGgubWluKGEsIGIpO1xuICAgYSA9IE1hdGgubWF4KGEsIGIpO1xuICAgdCA9IHQgLyBhO1xuXG4gICByZXR1cm4gTWF0aC5sb2coYSkgKyBNYXRoLmxvZygxICsgdCAqIHQpIC8gMjtcbiAgIH07XG5cbiAgICogMy4gQWJ1c2UgdGhlIGlkZW50aXR5IGNvcyhhdGFuKHkveCkgPSB4IC8gc3FydCh4XjIreV4yKTogKE9WRVJBTEwgRVJST1I6IDMuNDc4MDE3ODczNzAzNzIwNGUtMTApXG5cbiAgIE1hdGgubG9nKGEgLyBNYXRoLmNvcyhNYXRoLmF0YW4yKGIsIGEpKSlcblxuICAgKiA0LiBVc2UgMy4gYW5kIGFwcGx5IGxvZyBydWxlczogKE9WRVJBTEwgRVJST1I6IDEuMjAxNDA4NzUwMjYyMDg5NmUtOSlcblxuICAgTWF0aC5sb2coYSkgLSBNYXRoLmxvZyhNYXRoLmNvcyhNYXRoLmF0YW4yKGIsIGEpKSlcblxuICAgKi9cblxuICBhID0gYSAqIDAuNTtcbiAgYiA9IGIgKiAwLjU7XG5cbiAgcmV0dXJuIDAuNSAqIE1hdGgubG9nKGEgKiBhICsgYiAqIGIpICsgTWF0aC5MTjI7XG59XG5cbmNvbnN0IFAgPSB7ICdyZSc6IDAsICdpbSc6IDAgfTtcbmNvbnN0IHBhcnNlID0gZnVuY3Rpb24gKGEsIGIpIHtcblxuICBjb25zdCB6ID0gUDtcblxuICBpZiAoYSA9PT0gdW5kZWZpbmVkIHx8IGEgPT09IG51bGwpIHtcbiAgICB6WydyZSddID1cbiAgICAgIHpbJ2ltJ10gPSAwO1xuICB9IGVsc2UgaWYgKGIgIT09IHVuZGVmaW5lZCkge1xuICAgIHpbJ3JlJ10gPSBhO1xuICAgIHpbJ2ltJ10gPSBiO1xuICB9IGVsc2VcbiAgICBzd2l0Y2ggKHR5cGVvZiBhKSB7XG5cbiAgICAgIGNhc2UgJ29iamVjdCc6XG5cbiAgICAgICAgaWYgKCdpbScgaW4gYSAmJiAncmUnIGluIGEpIHtcbiAgICAgICAgICB6WydyZSddID0gYVsncmUnXTtcbiAgICAgICAgICB6WydpbSddID0gYVsnaW0nXTtcbiAgICAgICAgfSBlbHNlIGlmICgnYWJzJyBpbiBhICYmICdhcmcnIGluIGEpIHtcbiAgICAgICAgICBpZiAoIWlzRmluaXRlKGFbJ2FicyddKSAmJiBpc0Zpbml0ZShhWydhcmcnXSkpIHtcbiAgICAgICAgICAgIHJldHVybiBDb21wbGV4WydJTkZJTklUWSddO1xuICAgICAgICAgIH1cbiAgICAgICAgICB6WydyZSddID0gYVsnYWJzJ10gKiBNYXRoLmNvcyhhWydhcmcnXSk7XG4gICAgICAgICAgelsnaW0nXSA9IGFbJ2FicyddICogTWF0aC5zaW4oYVsnYXJnJ10pO1xuICAgICAgICB9IGVsc2UgaWYgKCdyJyBpbiBhICYmICdwaGknIGluIGEpIHtcbiAgICAgICAgICBpZiAoIWlzRmluaXRlKGFbJ3InXSkgJiYgaXNGaW5pdGUoYVsncGhpJ10pKSB7XG4gICAgICAgICAgICByZXR1cm4gQ29tcGxleFsnSU5GSU5JVFknXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgelsncmUnXSA9IGFbJ3InXSAqIE1hdGguY29zKGFbJ3BoaSddKTtcbiAgICAgICAgICB6WydpbSddID0gYVsnciddICogTWF0aC5zaW4oYVsncGhpJ10pO1xuICAgICAgICB9IGVsc2UgaWYgKGEubGVuZ3RoID09PSAyKSB7IC8vIFF1aWNrIGFycmF5IGNoZWNrXG4gICAgICAgICAgelsncmUnXSA9IGFbMF07XG4gICAgICAgICAgelsnaW0nXSA9IGFbMV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGFyc2VyX2V4aXQoKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnc3RyaW5nJzpcblxuICAgICAgICB6WydpbSddID0gLyogdm9pZCAqL1xuICAgICAgICB6WydyZSddID0gMDtcblxuICAgICAgICBjb25zdCB0b2tlbnMgPSBhLnJlcGxhY2UoL18vZywgJycpXG4gICAgICAgICAgLm1hdGNoKC9cXGQrXFwuP1xcZCplWystXT9cXGQrfFxcZCtcXC4/XFxkKnxcXC5cXGQrfC4vZyk7XG4gICAgICAgIGxldCBwbHVzID0gMTtcbiAgICAgICAgbGV0IG1pbnVzID0gMDtcblxuICAgICAgICBpZiAodG9rZW5zID09PSBudWxsKSB7XG4gICAgICAgICAgcGFyc2VyX2V4aXQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgICBjb25zdCBjID0gdG9rZW5zW2ldO1xuXG4gICAgICAgICAgaWYgKGMgPT09ICcgJyB8fCBjID09PSAnXFx0JyB8fCBjID09PSAnXFxuJykge1xuICAgICAgICAgICAgLyogdm9pZCAqL1xuICAgICAgICAgIH0gZWxzZSBpZiAoYyA9PT0gJysnKSB7XG4gICAgICAgICAgICBwbHVzKys7XG4gICAgICAgICAgfSBlbHNlIGlmIChjID09PSAnLScpIHtcbiAgICAgICAgICAgIG1pbnVzKys7XG4gICAgICAgICAgfSBlbHNlIGlmIChjID09PSAnaScgfHwgYyA9PT0gJ0knKSB7XG5cbiAgICAgICAgICAgIGlmIChwbHVzICsgbWludXMgPT09IDApIHtcbiAgICAgICAgICAgICAgcGFyc2VyX2V4aXQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRva2Vuc1tpICsgMV0gIT09ICcgJyAmJiAhaXNOYU4odG9rZW5zW2kgKyAxXSkpIHtcbiAgICAgICAgICAgICAgelsnaW0nXSArPSBwYXJzZUZsb2F0KChtaW51cyAlIDIgPyAnLScgOiAnJykgKyB0b2tlbnNbaSArIDFdKTtcbiAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgelsnaW0nXSArPSBwYXJzZUZsb2F0KChtaW51cyAlIDIgPyAnLScgOiAnJykgKyAnMScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGx1cyA9IG1pbnVzID0gMDtcblxuICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIGlmIChwbHVzICsgbWludXMgPT09IDAgfHwgaXNOYU4oYykpIHtcbiAgICAgICAgICAgICAgcGFyc2VyX2V4aXQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRva2Vuc1tpICsgMV0gPT09ICdpJyB8fCB0b2tlbnNbaSArIDFdID09PSAnSScpIHtcbiAgICAgICAgICAgICAgelsnaW0nXSArPSBwYXJzZUZsb2F0KChtaW51cyAlIDIgPyAnLScgOiAnJykgKyBjKTtcbiAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgelsncmUnXSArPSBwYXJzZUZsb2F0KChtaW51cyAlIDIgPyAnLScgOiAnJykgKyBjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBsdXMgPSBtaW51cyA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3RpbGwgc29tZXRoaW5nIG9uIHRoZSBzdGFja1xuICAgICAgICBpZiAocGx1cyArIG1pbnVzID4gMCkge1xuICAgICAgICAgIHBhcnNlcl9leGl0KCk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgIHpbJ2ltJ10gPSAwO1xuICAgICAgICB6WydyZSddID0gYTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHBhcnNlcl9leGl0KCk7XG4gICAgfVxuXG4gIGlmIChpc05hTih6WydyZSddKSB8fCBpc05hTih6WydpbSddKSkge1xuICAgIC8vIElmIGEgY2FsY3VsYXRpb24gaXMgTmFOLCB3ZSB0cmVhdCBpdCBhcyBOYU4gYW5kIGRvbid0IHRocm93XG4gICAgLy9wYXJzZXJfZXhpdCgpO1xuICB9XG5cbiAgcmV0dXJuIHo7XG59O1xuXG4vKipcbiAqIEBjb25zdHJ1Y3RvclxuICogQHJldHVybnMge0NvbXBsZXh9XG4gKi9cbmZ1bmN0aW9uIENvbXBsZXgoYSwgYikge1xuXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBDb21wbGV4KSkge1xuICAgIHJldHVybiBuZXcgQ29tcGxleChhLCBiKTtcbiAgfVxuXG4gIGNvbnN0IHogPSBwYXJzZShhLCBiKTtcblxuICB0aGlzWydyZSddID0gelsncmUnXTtcbiAgdGhpc1snaW0nXSA9IHpbJ2ltJ107XG59XG5cbkNvbXBsZXgucHJvdG90eXBlID0ge1xuXG4gICdyZSc6IDAsXG4gICdpbSc6IDAsXG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgdGhlIHNpZ24gb2YgYSBjb21wbGV4IG51bWJlciwgd2hpY2ggaXMgYSBub3JtYWxpemVkIGNvbXBsZXhcbiAgICpcbiAgICogQHJldHVybnMge0NvbXBsZXh9XG4gICAqL1xuICAnc2lnbic6IGZ1bmN0aW9uICgpIHtcblxuICAgIGNvbnN0IGFicyA9IGh5cG90KHRoaXNbJ3JlJ10sIHRoaXNbJ2ltJ10pO1xuXG4gICAgcmV0dXJuIG5ldyBDb21wbGV4KFxuICAgICAgdGhpc1sncmUnXSAvIGFicyxcbiAgICAgIHRoaXNbJ2ltJ10gLyBhYnMpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBZGRzIHR3byBjb21wbGV4IG51bWJlcnNcbiAgICpcbiAgICogQHJldHVybnMge0NvbXBsZXh9XG4gICAqL1xuICAnYWRkJzogZnVuY3Rpb24gKGEsIGIpIHtcblxuICAgIGNvbnN0IHogPSBwYXJzZShhLCBiKTtcblxuICAgIGNvbnN0IHRJbmZpbiA9IHRoaXNbJ2lzSW5maW5pdGUnXSgpO1xuICAgIGNvbnN0IHpJbmZpbiA9ICEoaXNGaW5pdGUoelsncmUnXSkgJiYgaXNGaW5pdGUoelsnaW0nXSkpO1xuXG4gICAgaWYgKHRJbmZpbiB8fCB6SW5maW4pIHtcblxuICAgICAgaWYgKHRJbmZpbiAmJiB6SW5maW4pIHtcbiAgICAgICAgLy8gSW5maW5pdHkgKyBJbmZpbml0eSA9IE5hTlxuICAgICAgICByZXR1cm4gQ29tcGxleFsnTkFOJ107XG4gICAgICB9XG4gICAgICAvLyBJbmZpbml0eSArIHogPSBJbmZpbml0eSB7IHdoZXJlIHogIT0gSW5maW5pdHkgfVxuICAgICAgcmV0dXJuIENvbXBsZXhbJ0lORklOSVRZJ107XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBDb21wbGV4KFxuICAgICAgdGhpc1sncmUnXSArIHpbJ3JlJ10sXG4gICAgICB0aGlzWydpbSddICsgelsnaW0nXSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFN1YnRyYWN0cyB0d28gY29tcGxleCBudW1iZXJzXG4gICAqXG4gICAqIEByZXR1cm5zIHtDb21wbGV4fVxuICAgKi9cbiAgJ3N1Yic6IGZ1bmN0aW9uIChhLCBiKSB7XG5cbiAgICBjb25zdCB6ID0gcGFyc2UoYSwgYik7XG5cbiAgICBjb25zdCB0SW5maW4gPSB0aGlzWydpc0luZmluaXRlJ10oKTtcbiAgICBjb25zdCB6SW5maW4gPSAhKGlzRmluaXRlKHpbJ3JlJ10pICYmIGlzRmluaXRlKHpbJ2ltJ10pKTtcblxuICAgIGlmICh0SW5maW4gfHwgekluZmluKSB7XG5cbiAgICAgIGlmICh0SW5maW4gJiYgekluZmluKSB7XG4gICAgICAgIC8vIEluZmluaXR5IC0gSW5maW5pdHkgPSBOYU5cbiAgICAgICAgcmV0dXJuIENvbXBsZXhbJ05BTiddO1xuICAgICAgfVxuICAgICAgLy8gSW5maW5pdHkgLSB6ID0gSW5maW5pdHkgeyB3aGVyZSB6ICE9IEluZmluaXR5IH1cbiAgICAgIHJldHVybiBDb21wbGV4WydJTkZJTklUWSddO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgQ29tcGxleChcbiAgICAgIHRoaXNbJ3JlJ10gLSB6WydyZSddLFxuICAgICAgdGhpc1snaW0nXSAtIHpbJ2ltJ10pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBNdWx0aXBsaWVzIHR3byBjb21wbGV4IG51bWJlcnNcbiAgICpcbiAgICogQHJldHVybnMge0NvbXBsZXh9XG4gICAqL1xuICAnbXVsJzogZnVuY3Rpb24gKGEsIGIpIHtcblxuICAgIGNvbnN0IHogPSBwYXJzZShhLCBiKTtcblxuICAgIGNvbnN0IHRJbmZpbiA9IHRoaXNbJ2lzSW5maW5pdGUnXSgpO1xuICAgIGNvbnN0IHpJbmZpbiA9ICEoaXNGaW5pdGUoelsncmUnXSkgJiYgaXNGaW5pdGUoelsnaW0nXSkpO1xuICAgIGNvbnN0IHRJc1plcm8gPSB0aGlzWydyZSddID09PSAwICYmIHRoaXNbJ2ltJ10gPT09IDA7XG4gICAgY29uc3QgeklzWmVybyA9IHpbJ3JlJ10gPT09IDAgJiYgelsnaW0nXSA9PT0gMDtcblxuICAgIC8vIEluZmluaXR5ICogMCA9IE5hTlxuICAgIGlmICh0SW5maW4gJiYgeklzWmVybyB8fCB6SW5maW4gJiYgdElzWmVybykge1xuICAgICAgcmV0dXJuIENvbXBsZXhbJ05BTiddO1xuICAgIH1cblxuICAgIC8vIEluZmluaXR5ICogeiA9IEluZmluaXR5IHsgd2hlcmUgeiAhPSAwIH1cbiAgICBpZiAodEluZmluIHx8IHpJbmZpbikge1xuICAgICAgcmV0dXJuIENvbXBsZXhbJ0lORklOSVRZJ107XG4gICAgfVxuXG4gICAgLy8gU2hvcnRjdXQgZm9yIHJlYWwgdmFsdWVzXG4gICAgaWYgKHpbJ2ltJ10gPT09IDAgJiYgdGhpc1snaW0nXSA9PT0gMCkge1xuICAgICAgcmV0dXJuIG5ldyBDb21wbGV4KHRoaXNbJ3JlJ10gKiB6WydyZSddLCAwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IENvbXBsZXgoXG4gICAgICB0aGlzWydyZSddICogelsncmUnXSAtIHRoaXNbJ2ltJ10gKiB6WydpbSddLFxuICAgICAgdGhpc1sncmUnXSAqIHpbJ2ltJ10gKyB0aGlzWydpbSddICogelsncmUnXSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIERpdmlkZXMgdHdvIGNvbXBsZXggbnVtYmVyc1xuICAgKlxuICAgKiBAcmV0dXJucyB7Q29tcGxleH1cbiAgICovXG4gICdkaXYnOiBmdW5jdGlvbiAoYSwgYikge1xuXG4gICAgY29uc3QgeiA9IHBhcnNlKGEsIGIpO1xuXG4gICAgY29uc3QgdEluZmluID0gdGhpc1snaXNJbmZpbml0ZSddKCk7XG4gICAgY29uc3QgekluZmluID0gIShpc0Zpbml0ZSh6WydyZSddKSAmJiBpc0Zpbml0ZSh6WydpbSddKSk7XG4gICAgY29uc3QgdElzWmVybyA9IHRoaXNbJ3JlJ10gPT09IDAgJiYgdGhpc1snaW0nXSA9PT0gMDtcbiAgICBjb25zdCB6SXNaZXJvID0gelsncmUnXSA9PT0gMCAmJiB6WydpbSddID09PSAwO1xuXG4gICAgLy8gMCAvIDAgPSBOYU4gYW5kIEluZmluaXR5IC8gSW5maW5pdHkgPSBOYU5cbiAgICBpZiAodElzWmVybyAmJiB6SXNaZXJvIHx8IHRJbmZpbiAmJiB6SW5maW4pIHtcbiAgICAgIHJldHVybiBDb21wbGV4WydOQU4nXTtcbiAgICB9XG5cbiAgICAvLyBJbmZpbml0eSAvIDAgPSBJbmZpbml0eVxuICAgIGlmICh6SXNaZXJvIHx8IHRJbmZpbikge1xuICAgICAgcmV0dXJuIENvbXBsZXhbJ0lORklOSVRZJ107XG4gICAgfVxuXG4gICAgLy8gMCAvIEluZmluaXR5ID0gMFxuICAgIGlmICh0SXNaZXJvIHx8IHpJbmZpbikge1xuICAgICAgcmV0dXJuIENvbXBsZXhbJ1pFUk8nXTtcbiAgICB9XG5cbiAgICBpZiAoMCA9PT0gelsnaW0nXSkge1xuICAgICAgLy8gRGl2aXNvciBpcyByZWFsXG4gICAgICByZXR1cm4gbmV3IENvbXBsZXgodGhpc1sncmUnXSAvIHpbJ3JlJ10sIHRoaXNbJ2ltJ10gLyB6WydyZSddKTtcbiAgICB9XG5cbiAgICBpZiAoTWF0aC5hYnMoelsncmUnXSkgPCBNYXRoLmFicyh6WydpbSddKSkge1xuXG4gICAgICBjb25zdCB4ID0gelsncmUnXSAvIHpbJ2ltJ107XG4gICAgICBjb25zdCB0ID0gelsncmUnXSAqIHggKyB6WydpbSddO1xuXG4gICAgICByZXR1cm4gbmV3IENvbXBsZXgoXG4gICAgICAgICh0aGlzWydyZSddICogeCArIHRoaXNbJ2ltJ10pIC8gdCxcbiAgICAgICAgKHRoaXNbJ2ltJ10gKiB4IC0gdGhpc1sncmUnXSkgLyB0KTtcblxuICAgIH0gZWxzZSB7XG5cbiAgICAgIGNvbnN0IHggPSB6WydpbSddIC8gelsncmUnXTtcbiAgICAgIGNvbnN0IHQgPSB6WydpbSddICogeCArIHpbJ3JlJ107XG5cbiAgICAgIHJldHVybiBuZXcgQ29tcGxleChcbiAgICAgICAgKHRoaXNbJ3JlJ10gKyB0aGlzWydpbSddICogeCkgLyB0LFxuICAgICAgICAodGhpc1snaW0nXSAtIHRoaXNbJ3JlJ10gKiB4KSAvIHQpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSBwb3dlciBvZiB0d28gY29tcGxleCBudW1iZXJzXG4gICAqXG4gICAqIEByZXR1cm5zIHtDb21wbGV4fVxuICAgKi9cbiAgJ3Bvdyc6IGZ1bmN0aW9uIChhLCBiKSB7XG5cbiAgICBjb25zdCB6ID0gcGFyc2UoYSwgYik7XG5cbiAgICBjb25zdCB0SXNaZXJvID0gdGhpc1sncmUnXSA9PT0gMCAmJiB0aGlzWydpbSddID09PSAwO1xuICAgIGNvbnN0IHpJc1plcm8gPSB6WydyZSddID09PSAwICYmIHpbJ2ltJ10gPT09IDA7XG5cbiAgICBpZiAoeklzWmVybykge1xuICAgICAgcmV0dXJuIENvbXBsZXhbJ09ORSddO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSBleHBvbmVudCBpcyByZWFsXG4gICAgaWYgKHpbJ2ltJ10gPT09IDApIHtcblxuICAgICAgaWYgKHRoaXNbJ2ltJ10gPT09IDAgJiYgdGhpc1sncmUnXSA+IDApIHtcblxuICAgICAgICByZXR1cm4gbmV3IENvbXBsZXgoTWF0aC5wb3codGhpc1sncmUnXSwgelsncmUnXSksIDApO1xuXG4gICAgICB9IGVsc2UgaWYgKHRoaXNbJ3JlJ10gPT09IDApIHsgLy8gSWYgYmFzZSBpcyBmdWxseSBpbWFnaW5hcnlcblxuICAgICAgICBzd2l0Y2ggKCh6WydyZSddICUgNCArIDQpICUgNCkge1xuICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ29tcGxleChNYXRoLnBvdyh0aGlzWydpbSddLCB6WydyZSddKSwgMCk7XG4gICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgcmV0dXJuIG5ldyBDb21wbGV4KDAsIE1hdGgucG93KHRoaXNbJ2ltJ10sIHpbJ3JlJ10pKTtcbiAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbXBsZXgoLU1hdGgucG93KHRoaXNbJ2ltJ10sIHpbJ3JlJ10pLCAwKTtcbiAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbXBsZXgoMCwgLU1hdGgucG93KHRoaXNbJ2ltJ10sIHpbJ3JlJ10pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qIEkgY291bGRuJ3QgZmluZCBhIGdvb2QgZm9ybXVsYSwgc28gaGVyZSBpcyBhIGRlcml2YXRpb24gYW5kIG9wdGltaXphdGlvblxuICAgICAqXG4gICAgICogel8xXnpfMiA9IChhICsgYmkpXihjICsgZGkpXG4gICAgICogICAgICAgICA9IGV4cCgoYyArIGRpKSAqIGxvZyhhICsgYmkpXG4gICAgICogICAgICAgICA9IHBvdyhhXjIgKyBiXjIsIChjICsgZGkpIC8gMikgKiBleHAoaShjICsgZGkpYXRhbjIoYiwgYSkpXG4gICAgICogPT4uLi5cbiAgICAgKiBSZSA9IChwb3coYV4yICsgYl4yLCBjIC8gMikgKiBleHAoLWQgKiBhdGFuMihiLCBhKSkpICogY29zKGQgKiBsb2coYV4yICsgYl4yKSAvIDIgKyBjICogYXRhbjIoYiwgYSkpXG4gICAgICogSW0gPSAocG93KGFeMiArIGJeMiwgYyAvIDIpICogZXhwKC1kICogYXRhbjIoYiwgYSkpKSAqIHNpbihkICogbG9nKGFeMiArIGJeMikgLyAyICsgYyAqIGF0YW4yKGIsIGEpKVxuICAgICAqXG4gICAgICogPT4uLi5cbiAgICAgKiBSZSA9IGV4cChjICogbG9nKHNxcnQoYV4yICsgYl4yKSkgLSBkICogYXRhbjIoYiwgYSkpICogY29zKGQgKiBsb2coc3FydChhXjIgKyBiXjIpKSArIGMgKiBhdGFuMihiLCBhKSlcbiAgICAgKiBJbSA9IGV4cChjICogbG9nKHNxcnQoYV4yICsgYl4yKSkgLSBkICogYXRhbjIoYiwgYSkpICogc2luKGQgKiBsb2coc3FydChhXjIgKyBiXjIpKSArIGMgKiBhdGFuMihiLCBhKSlcbiAgICAgKlxuICAgICAqID0+XG4gICAgICogUmUgPSBleHAoYyAqIGxvZ3NxMiAtIGQgKiBhcmcoel8xKSkgKiBjb3MoZCAqIGxvZ3NxMiArIGMgKiBhcmcoel8xKSlcbiAgICAgKiBJbSA9IGV4cChjICogbG9nc3EyIC0gZCAqIGFyZyh6XzEpKSAqIHNpbihkICogbG9nc3EyICsgYyAqIGFyZyh6XzEpKVxuICAgICAqXG4gICAgICovXG5cbiAgICBpZiAodElzWmVybyAmJiB6WydyZSddID4gMCkgeyAvLyBTYW1lIGJlaGF2aW9yIGFzIFdvbGZyYW1hbHBoYSwgWmVybyBpZiByZWFsIHBhcnQgaXMgemVyb1xuICAgICAgcmV0dXJuIENvbXBsZXhbJ1pFUk8nXTtcbiAgICB9XG5cbiAgICBjb25zdCBhcmcgPSBNYXRoLmF0YW4yKHRoaXNbJ2ltJ10sIHRoaXNbJ3JlJ10pO1xuICAgIGNvbnN0IGxvaCA9IGxvZ0h5cG90KHRoaXNbJ3JlJ10sIHRoaXNbJ2ltJ10pO1xuXG4gICAgbGV0IHJlID0gTWF0aC5leHAoelsncmUnXSAqIGxvaCAtIHpbJ2ltJ10gKiBhcmcpO1xuICAgIGxldCBpbSA9IHpbJ2ltJ10gKiBsb2ggKyB6WydyZSddICogYXJnO1xuICAgIHJldHVybiBuZXcgQ29tcGxleChcbiAgICAgIHJlICogTWF0aC5jb3MoaW0pLFxuICAgICAgcmUgKiBNYXRoLnNpbihpbSkpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhlIGNvbXBsZXggc3F1YXJlIHJvb3RcbiAgICpcbiAgICogQHJldHVybnMge0NvbXBsZXh9XG4gICAqL1xuICAnc3FydCc6IGZ1bmN0aW9uICgpIHtcblxuICAgIGNvbnN0IGEgPSB0aGlzWydyZSddO1xuICAgIGNvbnN0IGIgPSB0aGlzWydpbSddO1xuXG4gICAgaWYgKGIgPT09IDApIHtcbiAgICAgIC8vIFJlYWwgbnVtYmVyIGNhc2VcbiAgICAgIGlmIChhID49IDApIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb21wbGV4KE1hdGguc3FydChhKSwgMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IENvbXBsZXgoMCwgTWF0aC5zcXJ0KC1hKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgciA9IGh5cG90KGEsIGIpO1xuXG4gICAgbGV0IHJlID0gTWF0aC5zcXJ0KDAuNSAqIChyICsgTWF0aC5hYnMoYSkpKTsgLy8gc3FydCgyeCkgLyAyID0gc3FydCh4IC8gMilcbiAgICBsZXQgaW0gPSBNYXRoLmFicyhiKSAvICgyICogcmUpO1xuXG4gICAgaWYgKGEgPj0gMCkge1xuICAgICAgcmV0dXJuIG5ldyBDb21wbGV4KHJlLCBiIDwgMCA/IC1pbSA6IGltKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBDb21wbGV4KGltLCBiIDwgMCA/IC1yZSA6IHJlKTtcbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSB0aGUgY29tcGxleCBleHBvbmVudFxuICAgKlxuICAgKiBAcmV0dXJucyB7Q29tcGxleH1cbiAgICovXG4gICdleHAnOiBmdW5jdGlvbiAoKSB7XG5cbiAgICBjb25zdCBlciA9IE1hdGguZXhwKHRoaXNbJ3JlJ10pO1xuXG4gICAgaWYgKHRoaXNbJ2ltJ10gPT09IDApIHtcbiAgICAgIHJldHVybiBuZXcgQ29tcGxleChlciwgMCk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQ29tcGxleChcbiAgICAgIGVyICogTWF0aC5jb3ModGhpc1snaW0nXSksXG4gICAgICBlciAqIE1hdGguc2luKHRoaXNbJ2ltJ10pKTtcbiAgfSxcblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSBjb21wbGV4IGV4cG9uZW50IGFuZCBzdWJ0cmFjdHMgb25lLlxuICAgKlxuICAgKiBUaGlzIG1heSBiZSBtb3JlIGFjY3VyYXRlIHRoYW4gYENvbXBsZXgoeCkuZXhwKCkuc3ViKDEpYCBpZlxuICAgKiBgeGAgaXMgc21hbGwuXG4gICAqXG4gICAqIEByZXR1cm5zIHtDb21wbGV4fVxuICAgKi9cbiAgJ2V4cG0xJzogZnVuY3Rpb24gKCkge1xuXG4gICAgLyoqXG4gICAgICogZXhwKGEgKyBpKmIpIC0gMVxuICAgICA9IGV4cChhKSAqIChjb3MoYikgKyBqKnNpbihiKSkgLSAxXG4gICAgID0gZXhwbTEoYSkqY29zKGIpICsgY29zbTEoYikgKyBqKmV4cChhKSpzaW4oYilcbiAgICAgKi9cblxuICAgIGNvbnN0IGEgPSB0aGlzWydyZSddO1xuICAgIGNvbnN0IGIgPSB0aGlzWydpbSddO1xuXG4gICAgcmV0dXJuIG5ldyBDb21wbGV4KFxuICAgICAgTWF0aC5leHBtMShhKSAqIE1hdGguY29zKGIpICsgY29zbTEoYiksXG4gICAgICBNYXRoLmV4cChhKSAqIE1hdGguc2luKGIpKTtcbiAgfSxcblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSBuYXR1cmFsIGxvZ1xuICAgKlxuICAgKiBAcmV0dXJucyB7Q29tcGxleH1cbiAgICovXG4gICdsb2cnOiBmdW5jdGlvbiAoKSB7XG5cbiAgICBjb25zdCBhID0gdGhpc1sncmUnXTtcbiAgICBjb25zdCBiID0gdGhpc1snaW0nXTtcblxuICAgIGlmIChiID09PSAwICYmIGEgPiAwKSB7XG4gICAgICByZXR1cm4gbmV3IENvbXBsZXgoTWF0aC5sb2coYSksIDApO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgQ29tcGxleChcbiAgICAgIGxvZ0h5cG90KGEsIGIpLFxuICAgICAgTWF0aC5hdGFuMihiLCBhKSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSB0aGUgbWFnbml0dWRlIG9mIHRoZSBjb21wbGV4IG51bWJlclxuICAgKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgJ2Ficyc6IGZ1bmN0aW9uICgpIHtcblxuICAgIHJldHVybiBoeXBvdCh0aGlzWydyZSddLCB0aGlzWydpbSddKTtcbiAgfSxcblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSBhbmdsZSBvZiB0aGUgY29tcGxleCBudW1iZXJcbiAgICpcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gICdhcmcnOiBmdW5jdGlvbiAoKSB7XG5cbiAgICByZXR1cm4gTWF0aC5hdGFuMih0aGlzWydpbSddLCB0aGlzWydyZSddKTtcbiAgfSxcblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSBzaW5lIG9mIHRoZSBjb21wbGV4IG51bWJlclxuICAgKlxuICAgKiBAcmV0dXJucyB7Q29tcGxleH1cbiAgICovXG4gICdzaW4nOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAvLyBzaW4oeikgPSAoIGVeaXogLSBlXi1peiApIC8gMmkgXG4gICAgLy8gICAgICAgID0gc2luKGEpY29zaChiKSArIGkgY29zKGEpc2luaChiKVxuXG4gICAgY29uc3QgYSA9IHRoaXNbJ3JlJ107XG4gICAgY29uc3QgYiA9IHRoaXNbJ2ltJ107XG5cbiAgICByZXR1cm4gbmV3IENvbXBsZXgoXG4gICAgICBNYXRoLnNpbihhKSAqIGNvc2goYiksXG4gICAgICBNYXRoLmNvcyhhKSAqIHNpbmgoYikpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhlIGNvc2luZVxuICAgKlxuICAgKiBAcmV0dXJucyB7Q29tcGxleH1cbiAgICovXG4gICdjb3MnOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAvLyBjb3MoeikgPSAoIGVeaXogKyBlXi1peiApIC8gMiBcbiAgICAvLyAgICAgICAgPSBjb3MoYSljb3NoKGIpIC0gaSBzaW4oYSlzaW5oKGIpXG5cbiAgICBjb25zdCBhID0gdGhpc1sncmUnXTtcbiAgICBjb25zdCBiID0gdGhpc1snaW0nXTtcblxuICAgIHJldHVybiBuZXcgQ29tcGxleChcbiAgICAgIE1hdGguY29zKGEpICogY29zaChiKSxcbiAgICAgIC1NYXRoLnNpbihhKSAqIHNpbmgoYikpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhlIHRhbmdlbnRcbiAgICpcbiAgICogQHJldHVybnMge0NvbXBsZXh9XG4gICAqL1xuICAndGFuJzogZnVuY3Rpb24gKCkge1xuXG4gICAgLy8gdGFuKHopID0gc2luKHopIC8gY29zKHopIFxuICAgIC8vICAgICAgICA9ICggZV5peiAtIGVeLWl6ICkgLyAoIGkoIGVeaXogKyBlXi1peiApIClcbiAgICAvLyAgICAgICAgPSAoIGVeMml6IC0gMSApIC8gaSggZV4yaXogKyAxIClcbiAgICAvLyAgICAgICAgPSAoIHNpbigyYSkgKyBpIHNpbmgoMmIpICkgLyAoIGNvcygyYSkgKyBjb3NoKDJiKSApXG5cbiAgICBjb25zdCBhID0gMiAqIHRoaXNbJ3JlJ107XG4gICAgY29uc3QgYiA9IDIgKiB0aGlzWydpbSddO1xuICAgIGNvbnN0IGQgPSBNYXRoLmNvcyhhKSArIGNvc2goYik7XG5cbiAgICByZXR1cm4gbmV3IENvbXBsZXgoXG4gICAgICBNYXRoLnNpbihhKSAvIGQsXG4gICAgICBzaW5oKGIpIC8gZCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSB0aGUgY290YW5nZW50XG4gICAqXG4gICAqIEByZXR1cm5zIHtDb21wbGV4fVxuICAgKi9cbiAgJ2NvdCc6IGZ1bmN0aW9uICgpIHtcblxuICAgIC8vIGNvdChjKSA9IGkoZV4oY2kpICsgZV4oLWNpKSkgLyAoZV4oY2kpIC0gZV4oLWNpKSlcblxuICAgIGNvbnN0IGEgPSAyICogdGhpc1sncmUnXTtcbiAgICBjb25zdCBiID0gMiAqIHRoaXNbJ2ltJ107XG4gICAgY29uc3QgZCA9IE1hdGguY29zKGEpIC0gY29zaChiKTtcblxuICAgIHJldHVybiBuZXcgQ29tcGxleChcbiAgICAgIC1NYXRoLnNpbihhKSAvIGQsXG4gICAgICBzaW5oKGIpIC8gZCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSB0aGUgc2VjYW50XG4gICAqXG4gICAqIEByZXR1cm5zIHtDb21wbGV4fVxuICAgKi9cbiAgJ3NlYyc6IGZ1bmN0aW9uICgpIHtcblxuICAgIC8vIHNlYyhjKSA9IDIgLyAoZV4oY2kpICsgZV4oLWNpKSlcblxuICAgIGNvbnN0IGEgPSB0aGlzWydyZSddO1xuICAgIGNvbnN0IGIgPSB0aGlzWydpbSddO1xuICAgIGNvbnN0IGQgPSAwLjUgKiBjb3NoKDIgKiBiKSArIDAuNSAqIE1hdGguY29zKDIgKiBhKTtcblxuICAgIHJldHVybiBuZXcgQ29tcGxleChcbiAgICAgIE1hdGguY29zKGEpICogY29zaChiKSAvIGQsXG4gICAgICBNYXRoLnNpbihhKSAqIHNpbmgoYikgLyBkKTtcbiAgfSxcblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSBjb3NlY2Fuc1xuICAgKlxuICAgKiBAcmV0dXJucyB7Q29tcGxleH1cbiAgICovXG4gICdjc2MnOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAvLyBjc2MoYykgPSAyaSAvIChlXihjaSkgLSBlXigtY2kpKVxuXG4gICAgY29uc3QgYSA9IHRoaXNbJ3JlJ107XG4gICAgY29uc3QgYiA9IHRoaXNbJ2ltJ107XG4gICAgY29uc3QgZCA9IDAuNSAqIGNvc2goMiAqIGIpIC0gMC41ICogTWF0aC5jb3MoMiAqIGEpO1xuXG4gICAgcmV0dXJuIG5ldyBDb21wbGV4KFxuICAgICAgTWF0aC5zaW4oYSkgKiBjb3NoKGIpIC8gZCxcbiAgICAgIC1NYXRoLmNvcyhhKSAqIHNpbmgoYikgLyBkKTtcbiAgfSxcblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSBjb21wbGV4IGFyY3VzIHNpbnVzXG4gICAqXG4gICAqIEByZXR1cm5zIHtDb21wbGV4fVxuICAgKi9cbiAgJ2FzaW4nOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAvLyBhc2luKGMpID0gLWkgKiBsb2coY2kgKyBzcXJ0KDEgLSBjXjIpKVxuXG4gICAgY29uc3QgYSA9IHRoaXNbJ3JlJ107XG4gICAgY29uc3QgYiA9IHRoaXNbJ2ltJ107XG5cbiAgICBjb25zdCB0MSA9IG5ldyBDb21wbGV4KFxuICAgICAgYiAqIGIgLSBhICogYSArIDEsXG4gICAgICAtMiAqIGEgKiBiKVsnc3FydCddKCk7XG5cbiAgICBjb25zdCB0MiA9IG5ldyBDb21wbGV4KFxuICAgICAgdDFbJ3JlJ10gLSBiLFxuICAgICAgdDFbJ2ltJ10gKyBhKVsnbG9nJ10oKTtcblxuICAgIHJldHVybiBuZXcgQ29tcGxleCh0MlsnaW0nXSwgLXQyWydyZSddKTtcbiAgfSxcblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSBjb21wbGV4IGFyY3VzIGNvc2ludXNcbiAgICpcbiAgICogQHJldHVybnMge0NvbXBsZXh9XG4gICAqL1xuICAnYWNvcyc6IGZ1bmN0aW9uICgpIHtcblxuICAgIC8vIGFjb3MoYykgPSBpICogbG9nKGMgLSBpICogc3FydCgxIC0gY14yKSlcblxuICAgIGNvbnN0IGEgPSB0aGlzWydyZSddO1xuICAgIGNvbnN0IGIgPSB0aGlzWydpbSddO1xuXG4gICAgY29uc3QgdDEgPSBuZXcgQ29tcGxleChcbiAgICAgIGIgKiBiIC0gYSAqIGEgKyAxLFxuICAgICAgLTIgKiBhICogYilbJ3NxcnQnXSgpO1xuXG4gICAgY29uc3QgdDIgPSBuZXcgQ29tcGxleChcbiAgICAgIHQxWydyZSddIC0gYixcbiAgICAgIHQxWydpbSddICsgYSlbJ2xvZyddKCk7XG5cbiAgICByZXR1cm4gbmV3IENvbXBsZXgoTWF0aC5QSSAvIDIgLSB0MlsnaW0nXSwgdDJbJ3JlJ10pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhlIGNvbXBsZXggYXJjdXMgdGFuZ2VudFxuICAgKlxuICAgKiBAcmV0dXJucyB7Q29tcGxleH1cbiAgICovXG4gICdhdGFuJzogZnVuY3Rpb24gKCkge1xuXG4gICAgLy8gYXRhbihjKSA9IGkgLyAyIGxvZygoaSArIHgpIC8gKGkgLSB4KSlcblxuICAgIGNvbnN0IGEgPSB0aGlzWydyZSddO1xuICAgIGNvbnN0IGIgPSB0aGlzWydpbSddO1xuXG4gICAgaWYgKGEgPT09IDApIHtcblxuICAgICAgaWYgKGIgPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb21wbGV4KDAsIEluZmluaXR5KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGIgPT09IC0xKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29tcGxleCgwLCAtSW5maW5pdHkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGQgPSBhICogYSArICgxLjAgLSBiKSAqICgxLjAgLSBiKTtcblxuICAgIGNvbnN0IHQxID0gbmV3IENvbXBsZXgoXG4gICAgICAoMSAtIGIgKiBiIC0gYSAqIGEpIC8gZCxcbiAgICAgIC0yICogYSAvIGQpLmxvZygpO1xuXG4gICAgcmV0dXJuIG5ldyBDb21wbGV4KC0wLjUgKiB0MVsnaW0nXSwgMC41ICogdDFbJ3JlJ10pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhlIGNvbXBsZXggYXJjdXMgY290YW5nZW50XG4gICAqXG4gICAqIEByZXR1cm5zIHtDb21wbGV4fVxuICAgKi9cbiAgJ2Fjb3QnOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAvLyBhY290KGMpID0gaSAvIDIgbG9nKChjIC0gaSkgLyAoYyArIGkpKVxuXG4gICAgY29uc3QgYSA9IHRoaXNbJ3JlJ107XG4gICAgY29uc3QgYiA9IHRoaXNbJ2ltJ107XG5cbiAgICBpZiAoYiA9PT0gMCkge1xuICAgICAgcmV0dXJuIG5ldyBDb21wbGV4KE1hdGguYXRhbjIoMSwgYSksIDApO1xuICAgIH1cblxuICAgIGNvbnN0IGQgPSBhICogYSArIGIgKiBiO1xuICAgIHJldHVybiAoZCAhPT0gMClcbiAgICAgID8gbmV3IENvbXBsZXgoXG4gICAgICAgIGEgLyBkLFxuICAgICAgICAtYiAvIGQpLmF0YW4oKVxuICAgICAgOiBuZXcgQ29tcGxleChcbiAgICAgICAgKGEgIT09IDApID8gYSAvIDAgOiAwLFxuICAgICAgICAoYiAhPT0gMCkgPyAtYiAvIDAgOiAwKS5hdGFuKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSB0aGUgY29tcGxleCBhcmN1cyBzZWNhbnRcbiAgICpcbiAgICogQHJldHVybnMge0NvbXBsZXh9XG4gICAqL1xuICAnYXNlYyc6IGZ1bmN0aW9uICgpIHtcblxuICAgIC8vIGFzZWMoYykgPSAtaSAqIGxvZygxIC8gYyArIHNxcnQoMSAtIGkgLyBjXjIpKVxuXG4gICAgY29uc3QgYSA9IHRoaXNbJ3JlJ107XG4gICAgY29uc3QgYiA9IHRoaXNbJ2ltJ107XG5cbiAgICBpZiAoYSA9PT0gMCAmJiBiID09PSAwKSB7XG4gICAgICByZXR1cm4gbmV3IENvbXBsZXgoMCwgSW5maW5pdHkpO1xuICAgIH1cblxuICAgIGNvbnN0IGQgPSBhICogYSArIGIgKiBiO1xuICAgIHJldHVybiAoZCAhPT0gMClcbiAgICAgID8gbmV3IENvbXBsZXgoXG4gICAgICAgIGEgLyBkLFxuICAgICAgICAtYiAvIGQpLmFjb3MoKVxuICAgICAgOiBuZXcgQ29tcGxleChcbiAgICAgICAgKGEgIT09IDApID8gYSAvIDAgOiAwLFxuICAgICAgICAoYiAhPT0gMCkgPyAtYiAvIDAgOiAwKS5hY29zKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSB0aGUgY29tcGxleCBhcmN1cyBjb3NlY2Fuc1xuICAgKlxuICAgKiBAcmV0dXJucyB7Q29tcGxleH1cbiAgICovXG4gICdhY3NjJzogZnVuY3Rpb24gKCkge1xuXG4gICAgLy8gYWNzYyhjKSA9IC1pICogbG9nKGkgLyBjICsgc3FydCgxIC0gMSAvIGNeMikpXG5cbiAgICBjb25zdCBhID0gdGhpc1sncmUnXTtcbiAgICBjb25zdCBiID0gdGhpc1snaW0nXTtcblxuICAgIGlmIChhID09PSAwICYmIGIgPT09IDApIHtcbiAgICAgIHJldHVybiBuZXcgQ29tcGxleChNYXRoLlBJIC8gMiwgSW5maW5pdHkpO1xuICAgIH1cblxuICAgIGNvbnN0IGQgPSBhICogYSArIGIgKiBiO1xuICAgIHJldHVybiAoZCAhPT0gMClcbiAgICAgID8gbmV3IENvbXBsZXgoXG4gICAgICAgIGEgLyBkLFxuICAgICAgICAtYiAvIGQpLmFzaW4oKVxuICAgICAgOiBuZXcgQ29tcGxleChcbiAgICAgICAgKGEgIT09IDApID8gYSAvIDAgOiAwLFxuICAgICAgICAoYiAhPT0gMCkgPyAtYiAvIDAgOiAwKS5hc2luKCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSB0aGUgY29tcGxleCBzaW5oXG4gICAqXG4gICAqIEByZXR1cm5zIHtDb21wbGV4fVxuICAgKi9cbiAgJ3NpbmgnOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAvLyBzaW5oKGMpID0gKGVeYyAtIGVeLWMpIC8gMlxuXG4gICAgY29uc3QgYSA9IHRoaXNbJ3JlJ107XG4gICAgY29uc3QgYiA9IHRoaXNbJ2ltJ107XG5cbiAgICByZXR1cm4gbmV3IENvbXBsZXgoXG4gICAgICBzaW5oKGEpICogTWF0aC5jb3MoYiksXG4gICAgICBjb3NoKGEpICogTWF0aC5zaW4oYikpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhlIGNvbXBsZXggY29zaFxuICAgKlxuICAgKiBAcmV0dXJucyB7Q29tcGxleH1cbiAgICovXG4gICdjb3NoJzogZnVuY3Rpb24gKCkge1xuXG4gICAgLy8gY29zaChjKSA9IChlXmMgKyBlXi1jKSAvIDJcblxuICAgIGNvbnN0IGEgPSB0aGlzWydyZSddO1xuICAgIGNvbnN0IGIgPSB0aGlzWydpbSddO1xuXG4gICAgcmV0dXJuIG5ldyBDb21wbGV4KFxuICAgICAgY29zaChhKSAqIE1hdGguY29zKGIpLFxuICAgICAgc2luaChhKSAqIE1hdGguc2luKGIpKTtcbiAgfSxcblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSBjb21wbGV4IHRhbmhcbiAgICpcbiAgICogQHJldHVybnMge0NvbXBsZXh9XG4gICAqL1xuICAndGFuaCc6IGZ1bmN0aW9uICgpIHtcblxuICAgIC8vIHRhbmgoYykgPSAoZV5jIC0gZV4tYykgLyAoZV5jICsgZV4tYylcblxuICAgIGNvbnN0IGEgPSAyICogdGhpc1sncmUnXTtcbiAgICBjb25zdCBiID0gMiAqIHRoaXNbJ2ltJ107XG4gICAgY29uc3QgZCA9IGNvc2goYSkgKyBNYXRoLmNvcyhiKTtcblxuICAgIHJldHVybiBuZXcgQ29tcGxleChcbiAgICAgIHNpbmgoYSkgLyBkLFxuICAgICAgTWF0aC5zaW4oYikgLyBkKTtcbiAgfSxcblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSBjb21wbGV4IGNvdGhcbiAgICpcbiAgICogQHJldHVybnMge0NvbXBsZXh9XG4gICAqL1xuICAnY290aCc6IGZ1bmN0aW9uICgpIHtcblxuICAgIC8vIGNvdGgoYykgPSAoZV5jICsgZV4tYykgLyAoZV5jIC0gZV4tYylcblxuICAgIGNvbnN0IGEgPSAyICogdGhpc1sncmUnXTtcbiAgICBjb25zdCBiID0gMiAqIHRoaXNbJ2ltJ107XG4gICAgY29uc3QgZCA9IGNvc2goYSkgLSBNYXRoLmNvcyhiKTtcblxuICAgIHJldHVybiBuZXcgQ29tcGxleChcbiAgICAgIHNpbmgoYSkgLyBkLFxuICAgICAgLU1hdGguc2luKGIpIC8gZCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSB0aGUgY29tcGxleCBjb3RoXG4gICAqXG4gICAqIEByZXR1cm5zIHtDb21wbGV4fVxuICAgKi9cbiAgJ2NzY2gnOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAvLyBjc2NoKGMpID0gMiAvIChlXmMgLSBlXi1jKVxuXG4gICAgY29uc3QgYSA9IHRoaXNbJ3JlJ107XG4gICAgY29uc3QgYiA9IHRoaXNbJ2ltJ107XG4gICAgY29uc3QgZCA9IE1hdGguY29zKDIgKiBiKSAtIGNvc2goMiAqIGEpO1xuXG4gICAgcmV0dXJuIG5ldyBDb21wbGV4KFxuICAgICAgLTIgKiBzaW5oKGEpICogTWF0aC5jb3MoYikgLyBkLFxuICAgICAgMiAqIGNvc2goYSkgKiBNYXRoLnNpbihiKSAvIGQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhlIGNvbXBsZXggc2VjaFxuICAgKlxuICAgKiBAcmV0dXJucyB7Q29tcGxleH1cbiAgICovXG4gICdzZWNoJzogZnVuY3Rpb24gKCkge1xuXG4gICAgLy8gc2VjaChjKSA9IDIgLyAoZV5jICsgZV4tYylcblxuICAgIGNvbnN0IGEgPSB0aGlzWydyZSddO1xuICAgIGNvbnN0IGIgPSB0aGlzWydpbSddO1xuICAgIGNvbnN0IGQgPSBNYXRoLmNvcygyICogYikgKyBjb3NoKDIgKiBhKTtcblxuICAgIHJldHVybiBuZXcgQ29tcGxleChcbiAgICAgIDIgKiBjb3NoKGEpICogTWF0aC5jb3MoYikgLyBkLFxuICAgICAgLTIgKiBzaW5oKGEpICogTWF0aC5zaW4oYikgLyBkKTtcbiAgfSxcblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSBjb21wbGV4IGFzaW5oXG4gICAqXG4gICAqIEByZXR1cm5zIHtDb21wbGV4fVxuICAgKi9cbiAgJ2FzaW5oJzogZnVuY3Rpb24gKCkge1xuXG4gICAgLy8gYXNpbmgoYykgPSBsb2coYyArIHNxcnQoY14yICsgMSkpXG5cbiAgICBsZXQgdG1wID0gdGhpc1snaW0nXTtcbiAgICB0aGlzWydpbSddID0gLXRoaXNbJ3JlJ107XG4gICAgdGhpc1sncmUnXSA9IHRtcDtcbiAgICBjb25zdCByZXMgPSB0aGlzWydhc2luJ10oKTtcblxuICAgIHRoaXNbJ3JlJ10gPSAtdGhpc1snaW0nXTtcbiAgICB0aGlzWydpbSddID0gdG1wO1xuICAgIHRtcCA9IHJlc1sncmUnXTtcblxuICAgIHJlc1sncmUnXSA9IC1yZXNbJ2ltJ107XG4gICAgcmVzWydpbSddID0gdG1wO1xuICAgIHJldHVybiByZXM7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSB0aGUgY29tcGxleCBhY29zaFxuICAgKlxuICAgKiBAcmV0dXJucyB7Q29tcGxleH1cbiAgICovXG4gICdhY29zaCc6IGZ1bmN0aW9uICgpIHtcblxuICAgIC8vIGFjb3NoKGMpID0gbG9nKGMgKyBzcXJ0KGNeMiAtIDEpKVxuXG4gICAgY29uc3QgcmVzID0gdGhpc1snYWNvcyddKCk7XG4gICAgaWYgKHJlc1snaW0nXSA8PSAwKSB7XG4gICAgICBjb25zdCB0bXAgPSByZXNbJ3JlJ107XG4gICAgICByZXNbJ3JlJ10gPSAtcmVzWydpbSddO1xuICAgICAgcmVzWydpbSddID0gdG1wO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB0bXAgPSByZXNbJ2ltJ107XG4gICAgICByZXNbJ2ltJ10gPSAtcmVzWydyZSddO1xuICAgICAgcmVzWydyZSddID0gdG1wO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhlIGNvbXBsZXggYXRhbmhcbiAgICpcbiAgICogQHJldHVybnMge0NvbXBsZXh9XG4gICAqL1xuICAnYXRhbmgnOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAvLyBhdGFuaChjKSA9IGxvZygoMStjKSAvICgxLWMpKSAvIDJcblxuICAgIGNvbnN0IGEgPSB0aGlzWydyZSddO1xuICAgIGNvbnN0IGIgPSB0aGlzWydpbSddO1xuXG4gICAgY29uc3Qgbm9JTSA9IGEgPiAxICYmIGIgPT09IDA7XG4gICAgY29uc3Qgb25lTWludXMgPSAxIC0gYTtcbiAgICBjb25zdCBvbmVQbHVzID0gMSArIGE7XG4gICAgY29uc3QgZCA9IG9uZU1pbnVzICogb25lTWludXMgKyBiICogYjtcblxuICAgIGNvbnN0IHggPSAoZCAhPT0gMClcbiAgICAgID8gbmV3IENvbXBsZXgoXG4gICAgICAgIChvbmVQbHVzICogb25lTWludXMgLSBiICogYikgLyBkLFxuICAgICAgICAoYiAqIG9uZU1pbnVzICsgb25lUGx1cyAqIGIpIC8gZClcbiAgICAgIDogbmV3IENvbXBsZXgoXG4gICAgICAgIChhICE9PSAtMSkgPyAoYSAvIDApIDogMCxcbiAgICAgICAgKGIgIT09IDApID8gKGIgLyAwKSA6IDApO1xuXG4gICAgY29uc3QgdGVtcCA9IHhbJ3JlJ107XG4gICAgeFsncmUnXSA9IGxvZ0h5cG90KHhbJ3JlJ10sIHhbJ2ltJ10pIC8gMjtcbiAgICB4WydpbSddID0gTWF0aC5hdGFuMih4WydpbSddLCB0ZW1wKSAvIDI7XG4gICAgaWYgKG5vSU0pIHtcbiAgICAgIHhbJ2ltJ10gPSAteFsnaW0nXTtcbiAgICB9XG4gICAgcmV0dXJuIHg7XG4gIH0sXG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSB0aGUgY29tcGxleCBhY290aFxuICAgKlxuICAgKiBAcmV0dXJucyB7Q29tcGxleH1cbiAgICovXG4gICdhY290aCc6IGZ1bmN0aW9uICgpIHtcblxuICAgIC8vIGFjb3RoKGMpID0gbG9nKChjKzEpIC8gKGMtMSkpIC8gMlxuXG4gICAgY29uc3QgYSA9IHRoaXNbJ3JlJ107XG4gICAgY29uc3QgYiA9IHRoaXNbJ2ltJ107XG5cbiAgICBpZiAoYSA9PT0gMCAmJiBiID09PSAwKSB7XG4gICAgICByZXR1cm4gbmV3IENvbXBsZXgoMCwgTWF0aC5QSSAvIDIpO1xuICAgIH1cblxuICAgIGNvbnN0IGQgPSBhICogYSArIGIgKiBiO1xuICAgIHJldHVybiAoZCAhPT0gMClcbiAgICAgID8gbmV3IENvbXBsZXgoXG4gICAgICAgIGEgLyBkLFxuICAgICAgICAtYiAvIGQpLmF0YW5oKClcbiAgICAgIDogbmV3IENvbXBsZXgoXG4gICAgICAgIChhICE9PSAwKSA/IGEgLyAwIDogMCxcbiAgICAgICAgKGIgIT09IDApID8gLWIgLyAwIDogMCkuYXRhbmgoKTtcbiAgfSxcblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSBjb21wbGV4IGFjc2NoXG4gICAqXG4gICAqIEByZXR1cm5zIHtDb21wbGV4fVxuICAgKi9cbiAgJ2Fjc2NoJzogZnVuY3Rpb24gKCkge1xuXG4gICAgLy8gYWNzY2goYykgPSBsb2coKDErc3FydCgxK2NeMikpL2MpXG5cbiAgICBjb25zdCBhID0gdGhpc1sncmUnXTtcbiAgICBjb25zdCBiID0gdGhpc1snaW0nXTtcblxuICAgIGlmIChiID09PSAwKSB7XG5cbiAgICAgIHJldHVybiBuZXcgQ29tcGxleChcbiAgICAgICAgKGEgIT09IDApXG4gICAgICAgICAgPyBNYXRoLmxvZyhhICsgTWF0aC5zcXJ0KGEgKiBhICsgMSkpXG4gICAgICAgICAgOiBJbmZpbml0eSwgMCk7XG4gICAgfVxuXG4gICAgY29uc3QgZCA9IGEgKiBhICsgYiAqIGI7XG4gICAgcmV0dXJuIChkICE9PSAwKVxuICAgICAgPyBuZXcgQ29tcGxleChcbiAgICAgICAgYSAvIGQsXG4gICAgICAgIC1iIC8gZCkuYXNpbmgoKVxuICAgICAgOiBuZXcgQ29tcGxleChcbiAgICAgICAgKGEgIT09IDApID8gYSAvIDAgOiAwLFxuICAgICAgICAoYiAhPT0gMCkgPyAtYiAvIDAgOiAwKS5hc2luaCgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgdGhlIGNvbXBsZXggYXNlY2hcbiAgICpcbiAgICogQHJldHVybnMge0NvbXBsZXh9XG4gICAqL1xuICAnYXNlY2gnOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAvLyBhc2VjaChjKSA9IGxvZygoMStzcXJ0KDEtY14yKSkvYylcblxuICAgIGNvbnN0IGEgPSB0aGlzWydyZSddO1xuICAgIGNvbnN0IGIgPSB0aGlzWydpbSddO1xuXG4gICAgaWYgKHRoaXNbJ2lzWmVybyddKCkpIHtcbiAgICAgIHJldHVybiBDb21wbGV4WydJTkZJTklUWSddO1xuICAgIH1cblxuICAgIGNvbnN0IGQgPSBhICogYSArIGIgKiBiO1xuICAgIHJldHVybiAoZCAhPT0gMClcbiAgICAgID8gbmV3IENvbXBsZXgoXG4gICAgICAgIGEgLyBkLFxuICAgICAgICAtYiAvIGQpLmFjb3NoKClcbiAgICAgIDogbmV3IENvbXBsZXgoXG4gICAgICAgIChhICE9PSAwKSA/IGEgLyAwIDogMCxcbiAgICAgICAgKGIgIT09IDApID8gLWIgLyAwIDogMCkuYWNvc2goKTtcbiAgfSxcblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSBjb21wbGV4IGludmVyc2UgMS96XG4gICAqXG4gICAqIEByZXR1cm5zIHtDb21wbGV4fVxuICAgKi9cbiAgJ2ludmVyc2UnOiBmdW5jdGlvbiAoKSB7XG5cbiAgICAvLyAxIC8gMCA9IEluZmluaXR5IGFuZCAxIC8gSW5maW5pdHkgPSAwXG4gICAgaWYgKHRoaXNbJ2lzWmVybyddKCkpIHtcbiAgICAgIHJldHVybiBDb21wbGV4WydJTkZJTklUWSddO1xuICAgIH1cblxuICAgIGlmICh0aGlzWydpc0luZmluaXRlJ10oKSkge1xuICAgICAgcmV0dXJuIENvbXBsZXhbJ1pFUk8nXTtcbiAgICB9XG5cbiAgICBjb25zdCBhID0gdGhpc1sncmUnXTtcbiAgICBjb25zdCBiID0gdGhpc1snaW0nXTtcblxuICAgIGNvbnN0IGQgPSBhICogYSArIGIgKiBiO1xuXG4gICAgcmV0dXJuIG5ldyBDb21wbGV4KGEgLyBkLCAtYiAvIGQpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjb21wbGV4IGNvbmp1Z2F0ZVxuICAgKlxuICAgKiBAcmV0dXJucyB7Q29tcGxleH1cbiAgICovXG4gICdjb25qdWdhdGUnOiBmdW5jdGlvbiAoKSB7XG5cbiAgICByZXR1cm4gbmV3IENvbXBsZXgodGhpc1sncmUnXSwgLXRoaXNbJ2ltJ10pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBuZWdhdGVkIGNvbXBsZXggbnVtYmVyXG4gICAqXG4gICAqIEByZXR1cm5zIHtDb21wbGV4fVxuICAgKi9cbiAgJ25lZyc6IGZ1bmN0aW9uICgpIHtcblxuICAgIHJldHVybiBuZXcgQ29tcGxleCgtdGhpc1sncmUnXSwgLXRoaXNbJ2ltJ10pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDZWlscyB0aGUgYWN0dWFsIGNvbXBsZXggbnVtYmVyXG4gICAqXG4gICAqIEByZXR1cm5zIHtDb21wbGV4fVxuICAgKi9cbiAgJ2NlaWwnOiBmdW5jdGlvbiAocGxhY2VzKSB7XG5cbiAgICBwbGFjZXMgPSBNYXRoLnBvdygxMCwgcGxhY2VzIHx8IDApO1xuXG4gICAgcmV0dXJuIG5ldyBDb21wbGV4KFxuICAgICAgTWF0aC5jZWlsKHRoaXNbJ3JlJ10gKiBwbGFjZXMpIC8gcGxhY2VzLFxuICAgICAgTWF0aC5jZWlsKHRoaXNbJ2ltJ10gKiBwbGFjZXMpIC8gcGxhY2VzKTtcbiAgfSxcblxuICAvKipcbiAgICogRmxvb3JzIHRoZSBhY3R1YWwgY29tcGxleCBudW1iZXJcbiAgICpcbiAgICogQHJldHVybnMge0NvbXBsZXh9XG4gICAqL1xuICAnZmxvb3InOiBmdW5jdGlvbiAocGxhY2VzKSB7XG5cbiAgICBwbGFjZXMgPSBNYXRoLnBvdygxMCwgcGxhY2VzIHx8IDApO1xuXG4gICAgcmV0dXJuIG5ldyBDb21wbGV4KFxuICAgICAgTWF0aC5mbG9vcih0aGlzWydyZSddICogcGxhY2VzKSAvIHBsYWNlcyxcbiAgICAgIE1hdGguZmxvb3IodGhpc1snaW0nXSAqIHBsYWNlcykgLyBwbGFjZXMpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDZWlscyB0aGUgYWN0dWFsIGNvbXBsZXggbnVtYmVyXG4gICAqXG4gICAqIEByZXR1cm5zIHtDb21wbGV4fVxuICAgKi9cbiAgJ3JvdW5kJzogZnVuY3Rpb24gKHBsYWNlcykge1xuXG4gICAgcGxhY2VzID0gTWF0aC5wb3coMTAsIHBsYWNlcyB8fCAwKTtcblxuICAgIHJldHVybiBuZXcgQ29tcGxleChcbiAgICAgIE1hdGgucm91bmQodGhpc1sncmUnXSAqIHBsYWNlcykgLyBwbGFjZXMsXG4gICAgICBNYXRoLnJvdW5kKHRoaXNbJ2ltJ10gKiBwbGFjZXMpIC8gcGxhY2VzKTtcbiAgfSxcblxuICAvKipcbiAgICogQ29tcGFyZXMgdHdvIGNvbXBsZXggbnVtYmVyc1xuICAgKlxuICAgKiAqKk5vdGU6KiogbmV3IENvbXBsZXgoSW5maW5pdHkpLmVxdWFscyhJbmZpbml0eSkgPT09IGZhbHNlXG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgJ2VxdWFscyc6IGZ1bmN0aW9uIChhLCBiKSB7XG5cbiAgICBjb25zdCB6ID0gcGFyc2UoYSwgYik7XG5cbiAgICByZXR1cm4gTWF0aC5hYnMoelsncmUnXSAtIHRoaXNbJ3JlJ10pIDw9IENvbXBsZXhbJ0VQU0lMT04nXSAmJlxuICAgICAgTWF0aC5hYnMoelsnaW0nXSAtIHRoaXNbJ2ltJ10pIDw9IENvbXBsZXhbJ0VQU0lMT04nXTtcbiAgfSxcblxuICAvKipcbiAgICogQ2xvbmVzIHRoZSBhY3R1YWwgb2JqZWN0XG4gICAqXG4gICAqIEByZXR1cm5zIHtDb21wbGV4fVxuICAgKi9cbiAgJ2Nsb25lJzogZnVuY3Rpb24gKCkge1xuXG4gICAgcmV0dXJuIG5ldyBDb21wbGV4KHRoaXNbJ3JlJ10sIHRoaXNbJ2ltJ10pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXRzIGEgc3RyaW5nIG9mIHRoZSBhY3R1YWwgY29tcGxleCBudW1iZXJcbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gICd0b1N0cmluZyc6IGZ1bmN0aW9uICgpIHtcblxuICAgIGxldCBhID0gdGhpc1sncmUnXTtcbiAgICBsZXQgYiA9IHRoaXNbJ2ltJ107XG4gICAgbGV0IHJldCA9IFwiXCI7XG5cbiAgICBpZiAodGhpc1snaXNOYU4nXSgpKSB7XG4gICAgICByZXR1cm4gJ05hTic7XG4gICAgfVxuXG4gICAgaWYgKHRoaXNbJ2lzSW5maW5pdGUnXSgpKSB7XG4gICAgICByZXR1cm4gJ0luZmluaXR5JztcbiAgICB9XG5cbiAgICBpZiAoTWF0aC5hYnMoYSkgPCBDb21wbGV4WydFUFNJTE9OJ10pIHtcbiAgICAgIGEgPSAwO1xuICAgIH1cblxuICAgIGlmIChNYXRoLmFicyhiKSA8IENvbXBsZXhbJ0VQU0lMT04nXSkge1xuICAgICAgYiA9IDA7XG4gICAgfVxuXG4gICAgLy8gSWYgaXMgcmVhbCBudW1iZXJcbiAgICBpZiAoYiA9PT0gMCkge1xuICAgICAgcmV0dXJuIHJldCArIGE7XG4gICAgfVxuXG4gICAgaWYgKGEgIT09IDApIHtcbiAgICAgIHJldCArPSBhO1xuICAgICAgcmV0ICs9IFwiIFwiO1xuICAgICAgaWYgKGIgPCAwKSB7XG4gICAgICAgIGIgPSAtYjtcbiAgICAgICAgcmV0ICs9IFwiLVwiO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0ICs9IFwiK1wiO1xuICAgICAgfVxuICAgICAgcmV0ICs9IFwiIFwiO1xuICAgIH0gZWxzZSBpZiAoYiA8IDApIHtcbiAgICAgIGIgPSAtYjtcbiAgICAgIHJldCArPSBcIi1cIjtcbiAgICB9XG5cbiAgICBpZiAoMSAhPT0gYikgeyAvLyBiIGlzIHRoZSBhYnNvbHV0ZSBpbWFnaW5hcnkgcGFydFxuICAgICAgcmV0ICs9IGI7XG4gICAgfVxuICAgIHJldHVybiByZXQgKyBcImlcIjtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgYWN0dWFsIG51bWJlciBhcyBhIHZlY3RvclxuICAgKlxuICAgKiBAcmV0dXJucyB7QXJyYXl9XG4gICAqL1xuICAndG9WZWN0b3InOiBmdW5jdGlvbiAoKSB7XG5cbiAgICByZXR1cm4gW3RoaXNbJ3JlJ10sIHRoaXNbJ2ltJ11dO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhY3R1YWwgcmVhbCB2YWx1ZSBvZiB0aGUgY3VycmVudCBvYmplY3RcbiAgICpcbiAgICogQHJldHVybnMge251bWJlcnxudWxsfVxuICAgKi9cbiAgJ3ZhbHVlT2YnOiBmdW5jdGlvbiAoKSB7XG5cbiAgICBpZiAodGhpc1snaW0nXSA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXNbJ3JlJ107XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9LFxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHdoZXRoZXIgYSBjb21wbGV4IG51bWJlciBpcyBub3Qgb24gdGhlIFJpZW1hbm4gc3BoZXJlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG4gICdpc05hTic6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gaXNOYU4odGhpc1sncmUnXSkgfHwgaXNOYU4odGhpc1snaW0nXSk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hldGhlciBvciBub3QgYSBjb21wbGV4IG51bWJlciBpcyBhdCB0aGUgemVybyBwb2xlIG9mIHRoZVxuICAgKiBSaWVtYW5uIHNwaGVyZS5cbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICAnaXNaZXJvJzogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzWydpbSddID09PSAwICYmIHRoaXNbJ3JlJ10gPT09IDA7XG4gIH0sXG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hldGhlciBhIGNvbXBsZXggbnVtYmVyIGlzIG5vdCBhdCB0aGUgaW5maW5pdHkgcG9sZSBvZiB0aGVcbiAgICogUmllbWFubiBzcGhlcmUuXG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgKi9cbiAgJ2lzRmluaXRlJzogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBpc0Zpbml0ZSh0aGlzWydyZSddKSAmJiBpc0Zpbml0ZSh0aGlzWydpbSddKTtcbiAgfSxcblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB3aGV0aGVyIG9yIG5vdCBhIGNvbXBsZXggbnVtYmVyIGlzIGF0IHRoZSBpbmZpbml0eSBwb2xlIG9mIHRoZVxuICAgKiBSaWVtYW5uIHNwaGVyZS5cbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAqL1xuICAnaXNJbmZpbml0ZSc6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gIXRoaXNbJ2lzRmluaXRlJ10oKTtcbiAgfVxufTtcblxuQ29tcGxleFsnWkVSTyddID0gbmV3IENvbXBsZXgoMCwgMCk7XG5Db21wbGV4WydPTkUnXSA9IG5ldyBDb21wbGV4KDEsIDApO1xuQ29tcGxleFsnSSddID0gbmV3IENvbXBsZXgoMCwgMSk7XG5Db21wbGV4WydQSSddID0gbmV3IENvbXBsZXgoTWF0aC5QSSwgMCk7XG5Db21wbGV4WydFJ10gPSBuZXcgQ29tcGxleChNYXRoLkUsIDApO1xuQ29tcGxleFsnSU5GSU5JVFknXSA9IG5ldyBDb21wbGV4KEluZmluaXR5LCBJbmZpbml0eSk7XG5Db21wbGV4WydOQU4nXSA9IG5ldyBDb21wbGV4KE5hTiwgTmFOKTtcbkNvbXBsZXhbJ0VQU0lMT04nXSA9IDFlLTE1O1xuZXhwb3J0IHtcbiAgQ29tcGxleCBhcyBkZWZhdWx0LCBDb21wbGV4XG59O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/complex.js/dist/complex.mjs\n");

/***/ })

};
;